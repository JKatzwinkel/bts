grammar org.bbaw.bts.corpus.text.egy.EgyDsl with org.eclipse.xtext.common.Terminals

generate egyDsl "http://www.bbaw.org/bts/corpus/text/egy/EgyDsl"


    
TextContent:
	{TextContent}
	(items+=TextItem ((' ' | NEWLINE)?  (items+=TextItem))*);


TextItem:
	Sentence;

// sentence	
Sentence:
	{Sentence}
	'§' (items+=SentenceItem (' ' (NEWLINE)? items+=SentenceItem)*)? '§';

SentenceItem:
	 Word | AbstractMarker |  Ambivalence
;

AbstractMarker:
	Marker | VersMarker
;
terminal WS	: (' '|'\t');
terminal NEWLINE:
// New line on DOS or Unix 
    ('\r'|'\n'|'\r\n'|'\t');

Ambivalence:
	'%' (cases+=Case ('; ' (NEWLINE)? cases+=Case)+) '%'
;

Case:
	name=CASESTRING (NEWLINE)? (items+=SentenceItemNoAmbivalence (' ' (NEWLINE)? items+=SentenceItemNoAmbivalence)*) 
;

terminal CASESTRING:
	'case ' (!(':'))+ ': '
;

SentenceItemNoAmbivalence:
	Word | AbstractMarker
;

VersMarker:
	VersbreakMarker | VersFrontierMarker |BrokenVersbreakMarker
;

VersFrontierMarker:
	{VersFrontierMarker}
	'\uF0081'
	//'\uDB80\uDC81'//'@mv'
;

VersbreakMarker:
	{VersbreakMarker}
	'\uF0080'
//	'\uDB80\uDC80'//'@v'
;

BrokenVersbreakMarker:
	{BrokenVersbreakMarker}
	'\uDB80\uDC82'//'@v'
;

Marker:
	type = BETWEEN_HASHES
;



// word
Word:
	{Word}
	
	( wChar+=WordPart (('-')wChar+=WordPart)*)	
;

WordPart:
	('=')? ( wChar+= WordMiddle (wChar+=WordMiddle)* )//(wChar+=WordEnding)? (wChar+=WordEnding)?)	
;


WordMiddle:
//	{WordMiddle}
	Brackets | Chars 
;

// Chars...
Chars:
	name=EGYSTRING
;

terminal BETWEEN_HASHES : '#' (!'#')* '#'//'#' ('a'|'c'|'e'|'i'|'o'|'v'|'x'|'A'|'C'|'E'|'O'|'U'|'V'|'X'|'_'|'ä'|'Ä'|'ö'|'Ö'|'ü'|'Ü'|EGYSTRING)+ '#'
;

terminal EGYSTRING:(
 // AlephU
 '\uA722'
 //&aleph;=
 |'\uA723'
 '\u02BE'   // spiLen

//|'\u02BE'   // SpiLenU
|'\uA725'   // ajin
|'\uA724'   // AjinU
 |'j'|'y'|'w'|'b'|'f'|'m'|'n'|'r'
 |'h'|'ḥ'|'ḫ'|'ẖ'|'H'|'Ḥ'|'Ḫ'|'H̱'|'H̭'
 |'z'
 |'s'|'š'|'ś'|'S'|'Š'|'Ś'
 |'q'|'k'|'g'
 |'t'|'ṯ'|'ṭ'|'ṱ'|'T'|'Ṯ'|'Ṭ'|'Ṱ'
 |'d'|'ḏ'|'Ḏ'
 |'h̭'
 |'i̯'|'ı͗'|'ı̯͗'|'ï'|'i̭'|'I͗'|'I'
// |'\u0069\u032F'//iArcU
 |'\u0049\u032F' //IArcU
 |'\u00CF'   // ITremaU
 |'ḳ'|'Ḳ'
 |'u'|'u̯'|'U'|'\u0055\u032F'
 |'č'|'č̣'|'Č'|'Č̣'
 |'a'|'J'|'Y'|'W'|'B'|'P'|'F'|'M'
 |'N'|'R'|'L'
 
 |'Z'|'Q'|'K'|'G'|'D'
 |'A'
 

// coptic
//	|  'Ⲁ''|''ⲁ''|''Ⲃ'|'ⲃ'|'Ⲅ'|'ⲅ'|'Ⲇ'|'ⲇ'|'Ⲉ'|'ⲉ'|'Ⲋ'|'ⲋ'|'Ⲍ'|'ⲍ'|'Ⲏ'|'ⲏ'|'Ⲑ'|'ⲑ'|'Ⲓ'|'ⲓ'|'Ⲕ'|'ⲕ'|'Ⲗ'|'ⲗ'|'Ⲙ'|'ⲙ'|'Ⲛ'|'ⲛ'|'Ⲝ'|'ⲝ'|'Ⲟ'|'ⲟ'|'Ⲡ'|'ⲡ'|'Ⲣ'|'ⲣ'|'Ⲥ'|'ⲥ'|'Ⲧ'|'ⲧ'|'Ⲩ'|'ⲩ'|'Ⲫ'|'ⲫ'|'Ⲭ'|'ⲭ'|'Ⲯ'|'ⲯ'|'Ⲱ'|'ⲱ'|'Ⲳ'|'ⲳ'|'Ⲵ'|'ⲵ'|'Ⲷ'|'ⲷ'|'Ⲹ'|'ⲹ'|'Ⲻ'|'ⲻ'|'Ⲽ'|'ⲽ'|'Ⲿ'|'ⲿ'|'Ⳁ'|'ⳁ'|'Ⳃ'|'ⳃ'|'Ⳅ'|'ⳅ'|'Ⳇ'|'ⳇ'|'Ⳉ'|'ⳉ'|'Ⳋ'|'ⳋ'|'Ⳍ'|'ⳍ'|'Ⳏ'|'ⳏ'|'Ⳑ'|'ⳑ'|'Ⳓ'|'ⳓ'|'Ⳕ'|'ⳕ'|'Ⳗ'|'ⳗ'|'Ⳙ'|'ⳙ'|'Ⳛ'|'ⳛ'|'Ⳝ'|'ⳝ'|'Ⳟ'|'ⳟ'|'Ⳡ'|'ⳡ'|'Ⳣ'|'ⳣ'|'ⳤ'|'⳥'|'⳦'|'⳧'|'⳨'|'⳩'|'⳪'|'Ⳬ'|'ⳬ'|'Ⳮ'|'ⳮ'|'⳯'|'⳰'|'⳱'|'Ⳳ'|'ⳳ'|'⳴'|'⳵'|'⳶'|'⳷'|'⳸'|'⳹'|'⳺'|'⳻'|'⳼'|'⳽'|'⳾'|'⳿'|'Ϡ'|'ϡ'|'Ϣ'|'ϣ'|'Ϥ'|'ϥ'|'Ϧ'|'ϧ'|'Ϩ'|'ϩ'|'Ϫ'|'ϫ'|'Ϭ'|'ϭ'|'Ϯ'|'ϯ'
	|'\u2C80'..'\u2CFF'
	//oval
	| '\uD80C\uDE86' |'\uD80C\uDE87'
	
	//cartouche
	|'\uD80C\uDF79' |'\uD80C\uDF7A'
	|'\u13379'   // cartOn
	|'\u1337A'   // cartOff
	//serech
	|'\uD80C\uDE58' | '\uD80C\uDE82'
	|'p'|'l' 
	
	//interfix :
	|':'|'='|'\u2261'|','|'.'|'~'|'\u22ee'|'_'
	|'\u205D'   // trplColon	
//	//num
	|'0'..'9'
	
	// special
	|'Õ'|'ã'|'Þ'|'!'
	|'\u0152'   // OElig
	|'\u0153'   // oelig
	|'\u0178'   // Yuml
	|'\u00C6'
)+;

//terminal FULL_EGYSTRING:(
//	('a'|'c'|'e'|'i'|'o'|'v'|'x'|'A'|'C'|'E'|'O'|'U'|'V'|'X'|'_'|'ä'|'Ä'|'ö'|'Ö'|'ü'|'Ü'|EGYSTRING)+
//);

// textual criticism brackets
Brackets:
	Rasur | AncientExpanded | RestorationOverRasur |
	Expanded  | DisputableReading | Emendation | Lacuna | Deletion | ExpandedColumn  
	| PartialDestruction | Destruction
;


Expanded:
	{Expanded}
	'(' wChar+=NoExpanded+ ')'
;

NoExpanded:
	Chars
;

Emendation:
	{Emendation}
	'<' wChar+=NoEmendation+ '>'
	;

NoEmendation:
	Chars | Expanded  
;

DisputableReading:
	{DisputableReading}
	'\u2E2E' wChar+=NoDisputableReading+ '?'
;

NoDisputableReading:
	 Expanded | Chars
;

Lacuna:
	{Lacuna}
	'[' wChar+=NoLacuna+ ']'
;

NoLacuna:
	Expanded | Chars
;

Deletion:
	{Deletion}
	'{' wChar+=NoDeletion+ '}'
;

NoDeletion:
	Chars | PartialDestruction | Expanded
;

ExpandedColumn:
	{ExpandedColumn}
	'<<' wChar+=NoExpandedColumn+ '>>'
;

NoExpandedColumn:
	Chars | Expanded
;

Rasur:
	{Rasur}
	'{{' wChar+=NoRasur+ '}}'
;

NoRasur:
	Chars | Expanded
;

AncientExpanded:
	{AncientExpanded}
	'((' wChar+=NoAncientExpanded+ '))'
;

NoAncientExpanded:
	Chars | Expanded
;

RestorationOverRasur:
	{RestorationOverRasur}
	'[[' wChar+=NoRestorationOverRasur+ ']]'
;

NoRestorationOverRasur:
	Chars | Expanded
;

PartialDestruction:
	{PartialDestruction}
	'\u2E22' wChar+=NoPartialDestruction+ '\u2E23'
;

NoPartialDestruction:
	Chars | Deletion | Expanded
;

Destruction:
	{Destruction}
	'\u2013' comment=COMMNENT_EGYSTRING '\u2013'
;

terminal COMMNENT_EGYSTRING:
	 (!'\u2013')*  // Gedankenstrich, langer Bindestrich
;
