/*
* generated by Xtext
*/
package org.bbaw.bts.corpus.text.egy.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class EgyDslGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class TextContentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TextContent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTextContentAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cItemsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cItemsTextItemParserRuleCall_1_0_0 = (RuleCall)cItemsAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Alternatives cAlternatives_1_1_0 = (Alternatives)cGroup_1_1.eContents().get(0);
		private final Keyword cSpaceKeyword_1_1_0_0 = (Keyword)cAlternatives_1_1_0.eContents().get(0);
		private final RuleCall cNEWLINETerminalRuleCall_1_1_0_1 = (RuleCall)cAlternatives_1_1_0.eContents().get(1);
		private final Assignment cItemsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cItemsTextItemParserRuleCall_1_1_1_0 = (RuleCall)cItemsAssignment_1_1_1.eContents().get(0);
		
		//TextContent:
		//	{TextContent} (items+=TextItem ((" " | NEWLINE)? items+=TextItem)*);
		public ParserRule getRule() { return rule; }

		//{TextContent} (items+=TextItem ((" " | NEWLINE)? items+=TextItem)*)
		public Group getGroup() { return cGroup; }

		//{TextContent}
		public Action getTextContentAction_0() { return cTextContentAction_0; }

		//items+=TextItem ((" " | NEWLINE)? items+=TextItem)*
		public Group getGroup_1() { return cGroup_1; }

		//items+=TextItem
		public Assignment getItemsAssignment_1_0() { return cItemsAssignment_1_0; }

		//TextItem
		public RuleCall getItemsTextItemParserRuleCall_1_0_0() { return cItemsTextItemParserRuleCall_1_0_0; }

		//((" " | NEWLINE)? items+=TextItem)*
		public Group getGroup_1_1() { return cGroup_1_1; }

		//(" " | NEWLINE)?
		public Alternatives getAlternatives_1_1_0() { return cAlternatives_1_1_0; }

		//" "
		public Keyword getSpaceKeyword_1_1_0_0() { return cSpaceKeyword_1_1_0_0; }

		//NEWLINE
		public RuleCall getNEWLINETerminalRuleCall_1_1_0_1() { return cNEWLINETerminalRuleCall_1_1_0_1; }

		//items+=TextItem
		public Assignment getItemsAssignment_1_1_1() { return cItemsAssignment_1_1_1; }

		//TextItem
		public RuleCall getItemsTextItemParserRuleCall_1_1_1_0() { return cItemsTextItemParserRuleCall_1_1_1_0; }
	}

	public class TextItemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TextItem");
		private final RuleCall cSentenceParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//TextItem:
		//	Sentence;
		public ParserRule getRule() { return rule; }

		//Sentence
		public RuleCall getSentenceParserRuleCall() { return cSentenceParserRuleCall; }
	}

	public class SentenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Sentence");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSentenceAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSectionSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cItemsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cItemsSentenceItemParserRuleCall_2_0_0 = (RuleCall)cItemsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cSpaceKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final RuleCall cNEWLINETerminalRuleCall_2_1_1 = (RuleCall)cGroup_2_1.eContents().get(1);
		private final Assignment cItemsAssignment_2_1_2 = (Assignment)cGroup_2_1.eContents().get(2);
		private final RuleCall cItemsSentenceItemParserRuleCall_2_1_2_0 = (RuleCall)cItemsAssignment_2_1_2.eContents().get(0);
		private final Keyword cSectionSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//// sentence	
		//Sentence:
		//	{Sentence} "§" (items+=SentenceItem (" " NEWLINE? items+=SentenceItem)*)? "§";
		public ParserRule getRule() { return rule; }

		//{Sentence} "§" (items+=SentenceItem (" " NEWLINE? items+=SentenceItem)*)? "§"
		public Group getGroup() { return cGroup; }

		//{Sentence}
		public Action getSentenceAction_0() { return cSentenceAction_0; }

		//"§"
		public Keyword getSectionSignKeyword_1() { return cSectionSignKeyword_1; }

		//(items+=SentenceItem (" " NEWLINE? items+=SentenceItem)*)?
		public Group getGroup_2() { return cGroup_2; }

		//items+=SentenceItem
		public Assignment getItemsAssignment_2_0() { return cItemsAssignment_2_0; }

		//SentenceItem
		public RuleCall getItemsSentenceItemParserRuleCall_2_0_0() { return cItemsSentenceItemParserRuleCall_2_0_0; }

		//(" " NEWLINE? items+=SentenceItem)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//" "
		public Keyword getSpaceKeyword_2_1_0() { return cSpaceKeyword_2_1_0; }

		//NEWLINE?
		public RuleCall getNEWLINETerminalRuleCall_2_1_1() { return cNEWLINETerminalRuleCall_2_1_1; }

		//items+=SentenceItem
		public Assignment getItemsAssignment_2_1_2() { return cItemsAssignment_2_1_2; }

		//SentenceItem
		public RuleCall getItemsSentenceItemParserRuleCall_2_1_2_0() { return cItemsSentenceItemParserRuleCall_2_1_2_0; }

		//"§"
		public Keyword getSectionSignKeyword_3() { return cSectionSignKeyword_3; }
	}

	public class SentenceItemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SentenceItem");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cWordParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAbstractMarkerParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAmbivalenceParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//SentenceItem:
		//	Word | AbstractMarker | Ambivalence;
		public ParserRule getRule() { return rule; }

		//Word | AbstractMarker | Ambivalence
		public Alternatives getAlternatives() { return cAlternatives; }

		//Word
		public RuleCall getWordParserRuleCall_0() { return cWordParserRuleCall_0; }

		//AbstractMarker
		public RuleCall getAbstractMarkerParserRuleCall_1() { return cAbstractMarkerParserRuleCall_1; }

		//Ambivalence
		public RuleCall getAmbivalenceParserRuleCall_2() { return cAmbivalenceParserRuleCall_2; }
	}

	public class AbstractMarkerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbstractMarker");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMarkerParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVersMarkerParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDestructionMarkerParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//AbstractMarker:
		//	Marker | VersMarker | DestructionMarker;
		public ParserRule getRule() { return rule; }

		//Marker | VersMarker | DestructionMarker
		public Alternatives getAlternatives() { return cAlternatives; }

		//Marker
		public RuleCall getMarkerParserRuleCall_0() { return cMarkerParserRuleCall_0; }

		//VersMarker
		public RuleCall getVersMarkerParserRuleCall_1() { return cVersMarkerParserRuleCall_1; }

		//DestructionMarker
		public RuleCall getDestructionMarkerParserRuleCall_2() { return cDestructionMarkerParserRuleCall_2; }
	}

	public class AmbivalenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Ambivalence");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPercentSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cCasesAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cCasesCaseParserRuleCall_1_0_0 = (RuleCall)cCasesAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cVerticalLineSpaceKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final RuleCall cNEWLINETerminalRuleCall_1_1_1 = (RuleCall)cGroup_1_1.eContents().get(1);
		private final Assignment cCasesAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cCasesCaseParserRuleCall_1_1_2_0 = (RuleCall)cCasesAssignment_1_1_2.eContents().get(0);
		private final Keyword cPercentSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Ambivalence:
		//	"%" (cases+=Case ("| " NEWLINE? cases+=Case)+) "%";
		public ParserRule getRule() { return rule; }

		//"%" (cases+=Case ("| " NEWLINE? cases+=Case)+) "%"
		public Group getGroup() { return cGroup; }

		//"%"
		public Keyword getPercentSignKeyword_0() { return cPercentSignKeyword_0; }

		//cases+=Case ("| " NEWLINE? cases+=Case)+
		public Group getGroup_1() { return cGroup_1; }

		//cases+=Case
		public Assignment getCasesAssignment_1_0() { return cCasesAssignment_1_0; }

		//Case
		public RuleCall getCasesCaseParserRuleCall_1_0_0() { return cCasesCaseParserRuleCall_1_0_0; }

		//("| " NEWLINE? cases+=Case)+
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"| "
		public Keyword getVerticalLineSpaceKeyword_1_1_0() { return cVerticalLineSpaceKeyword_1_1_0; }

		//NEWLINE?
		public RuleCall getNEWLINETerminalRuleCall_1_1_1() { return cNEWLINETerminalRuleCall_1_1_1; }

		//cases+=Case
		public Assignment getCasesAssignment_1_1_2() { return cCasesAssignment_1_1_2; }

		//Case
		public RuleCall getCasesCaseParserRuleCall_1_1_2_0() { return cCasesCaseParserRuleCall_1_1_2_0; }

		//"%"
		public Keyword getPercentSignKeyword_2() { return cPercentSignKeyword_2; }
	}

	public class CaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Case");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameCASESTRINGTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final RuleCall cNEWLINETerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cItemsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cItemsSentenceItemNoAmbivalenceParserRuleCall_2_0_0 = (RuleCall)cItemsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cSpaceKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final RuleCall cNEWLINETerminalRuleCall_2_1_1 = (RuleCall)cGroup_2_1.eContents().get(1);
		private final Assignment cItemsAssignment_2_1_2 = (Assignment)cGroup_2_1.eContents().get(2);
		private final RuleCall cItemsSentenceItemNoAmbivalenceParserRuleCall_2_1_2_0 = (RuleCall)cItemsAssignment_2_1_2.eContents().get(0);
		
		//Case:
		//	name=CASESTRING NEWLINE? (items+=SentenceItemNoAmbivalence (" " NEWLINE? items+=SentenceItemNoAmbivalence)*);
		public ParserRule getRule() { return rule; }

		//name=CASESTRING NEWLINE? (items+=SentenceItemNoAmbivalence (" " NEWLINE? items+=SentenceItemNoAmbivalence)*)
		public Group getGroup() { return cGroup; }

		//name=CASESTRING
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//CASESTRING
		public RuleCall getNameCASESTRINGTerminalRuleCall_0_0() { return cNameCASESTRINGTerminalRuleCall_0_0; }

		//NEWLINE?
		public RuleCall getNEWLINETerminalRuleCall_1() { return cNEWLINETerminalRuleCall_1; }

		//items+=SentenceItemNoAmbivalence (" " NEWLINE? items+=SentenceItemNoAmbivalence)*
		public Group getGroup_2() { return cGroup_2; }

		//items+=SentenceItemNoAmbivalence
		public Assignment getItemsAssignment_2_0() { return cItemsAssignment_2_0; }

		//SentenceItemNoAmbivalence
		public RuleCall getItemsSentenceItemNoAmbivalenceParserRuleCall_2_0_0() { return cItemsSentenceItemNoAmbivalenceParserRuleCall_2_0_0; }

		//(" " NEWLINE? items+=SentenceItemNoAmbivalence)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//" "
		public Keyword getSpaceKeyword_2_1_0() { return cSpaceKeyword_2_1_0; }

		//NEWLINE?
		public RuleCall getNEWLINETerminalRuleCall_2_1_1() { return cNEWLINETerminalRuleCall_2_1_1; }

		//items+=SentenceItemNoAmbivalence
		public Assignment getItemsAssignment_2_1_2() { return cItemsAssignment_2_1_2; }

		//SentenceItemNoAmbivalence
		public RuleCall getItemsSentenceItemNoAmbivalenceParserRuleCall_2_1_2_0() { return cItemsSentenceItemNoAmbivalenceParserRuleCall_2_1_2_0; }
	}

	public class SentenceItemNoAmbivalenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SentenceItemNoAmbivalence");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cWordParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAbstractMarkerParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//SentenceItemNoAmbivalence:
		//	Word | AbstractMarker;
		public ParserRule getRule() { return rule; }

		//Word | AbstractMarker
		public Alternatives getAlternatives() { return cAlternatives; }

		//Word
		public RuleCall getWordParserRuleCall_0() { return cWordParserRuleCall_0; }

		//AbstractMarker
		public RuleCall getAbstractMarkerParserRuleCall_1() { return cAbstractMarkerParserRuleCall_1; }
	}

	public class VersMarkerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VersMarker");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVersbreakMarkerParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVersFrontierMarkerParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBrokenVersbreakMarkerParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cMissingVersMarkerParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cDestroyedVersMarkerParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cDeletedVersMarkerParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cDisputableVersMarkerParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cRestorationOverRasurMarkerParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cAncientExpandedMarkerParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cRasurMarkerParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		
		//VersMarker:
		//	VersbreakMarker | VersFrontierMarker | BrokenVersbreakMarker | MissingVersMarker | DestroyedVersMarker |
		//	DeletedVersMarker | DisputableVersMarker | RestorationOverRasurMarker | AncientExpandedMarker | RasurMarker;
		public ParserRule getRule() { return rule; }

		//VersbreakMarker | VersFrontierMarker | BrokenVersbreakMarker | MissingVersMarker | DestroyedVersMarker |
		//DeletedVersMarker | DisputableVersMarker | RestorationOverRasurMarker | AncientExpandedMarker | RasurMarker
		public Alternatives getAlternatives() { return cAlternatives; }

		//VersbreakMarker
		public RuleCall getVersbreakMarkerParserRuleCall_0() { return cVersbreakMarkerParserRuleCall_0; }

		//VersFrontierMarker
		public RuleCall getVersFrontierMarkerParserRuleCall_1() { return cVersFrontierMarkerParserRuleCall_1; }

		//BrokenVersbreakMarker
		public RuleCall getBrokenVersbreakMarkerParserRuleCall_2() { return cBrokenVersbreakMarkerParserRuleCall_2; }

		//MissingVersMarker
		public RuleCall getMissingVersMarkerParserRuleCall_3() { return cMissingVersMarkerParserRuleCall_3; }

		//DestroyedVersMarker
		public RuleCall getDestroyedVersMarkerParserRuleCall_4() { return cDestroyedVersMarkerParserRuleCall_4; }

		//DeletedVersMarker
		public RuleCall getDeletedVersMarkerParserRuleCall_5() { return cDeletedVersMarkerParserRuleCall_5; }

		//DisputableVersMarker
		public RuleCall getDisputableVersMarkerParserRuleCall_6() { return cDisputableVersMarkerParserRuleCall_6; }

		//RestorationOverRasurMarker
		public RuleCall getRestorationOverRasurMarkerParserRuleCall_7() { return cRestorationOverRasurMarkerParserRuleCall_7; }

		//AncientExpandedMarker
		public RuleCall getAncientExpandedMarkerParserRuleCall_8() { return cAncientExpandedMarkerParserRuleCall_8; }

		//RasurMarker
		public RuleCall getRasurMarkerParserRuleCall_9() { return cRasurMarkerParserRuleCall_9; }
	}

	public class DisputableVersMarkerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DisputableVersMarker");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDisputableVersMarkerAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cReversedQuestionMarkLeadSurrogateDb80TrailSurrogateDc80QuestionMarkKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//DisputableVersMarker:
		//	{DisputableVersMarker} //'@v'
		//	"⸮󰂀?";
		public ParserRule getRule() { return rule; }

		//{DisputableVersMarker} //'@v'
		//"⸮󰂀?"
		public Group getGroup() { return cGroup; }

		//{DisputableVersMarker}
		public Action getDisputableVersMarkerAction_0() { return cDisputableVersMarkerAction_0; }

		////'@v'
		//"⸮󰂀?"
		public Keyword getReversedQuestionMarkLeadSurrogateDb80TrailSurrogateDc80QuestionMarkKeyword_1() { return cReversedQuestionMarkLeadSurrogateDb80TrailSurrogateDc80QuestionMarkKeyword_1; }
	}

	public class DeletedVersMarkerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DeletedVersMarker");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDeletedVersMarkerAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketLeadSurrogateDb80TrailSurrogateDc80RightCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//DeletedVersMarker:
		//	{DeletedVersMarker} //'@v'
		//	"{󰂀}";
		public ParserRule getRule() { return rule; }

		//{DeletedVersMarker} //'@v'
		//"{󰂀}"
		public Group getGroup() { return cGroup; }

		//{DeletedVersMarker}
		public Action getDeletedVersMarkerAction_0() { return cDeletedVersMarkerAction_0; }

		////'@v'
		//"{󰂀}"
		public Keyword getLeftCurlyBracketLeadSurrogateDb80TrailSurrogateDc80RightCurlyBracketKeyword_1() { return cLeftCurlyBracketLeadSurrogateDb80TrailSurrogateDc80RightCurlyBracketKeyword_1; }
	}

	public class DestroyedVersMarkerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DestroyedVersMarker");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDestroyedVersMarkerAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketLeadSurrogateDb80TrailSurrogateDc80RightSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//DestroyedVersMarker:
		//	{DestroyedVersMarker} //'@v'
		//	"[󰂀]";
		public ParserRule getRule() { return rule; }

		//{DestroyedVersMarker} //'@v'
		//"[󰂀]"
		public Group getGroup() { return cGroup; }

		//{DestroyedVersMarker}
		public Action getDestroyedVersMarkerAction_0() { return cDestroyedVersMarkerAction_0; }

		////'@v'
		//"[󰂀]"
		public Keyword getLeftSquareBracketLeadSurrogateDb80TrailSurrogateDc80RightSquareBracketKeyword_1() { return cLeftSquareBracketLeadSurrogateDb80TrailSurrogateDc80RightSquareBracketKeyword_1; }
	}

	public class MissingVersMarkerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MissingVersMarker");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMissingVersMarkerAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftPointingAngleBracketLeadSurrogateDb80TrailSurrogateDc80RightPointingAngleBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//MissingVersMarker:
		//	{MissingVersMarker} //'@v'
		//	"〈󰂀〉";
		public ParserRule getRule() { return rule; }

		//{MissingVersMarker} //'@v'
		//"〈󰂀〉"
		public Group getGroup() { return cGroup; }

		//{MissingVersMarker}
		public Action getMissingVersMarkerAction_0() { return cMissingVersMarkerAction_0; }

		////'@v'
		//"〈󰂀〉"
		public Keyword getLeftPointingAngleBracketLeadSurrogateDb80TrailSurrogateDc80RightPointingAngleBracketKeyword_1() { return cLeftPointingAngleBracketLeadSurrogateDb80TrailSurrogateDc80RightPointingAngleBracketKeyword_1; }
	}

	public class RestorationOverRasurMarkerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RestorationOverRasurMarker");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRestorationOverRasurMarkerAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketLeftSquareBracketLeadSurrogateDb80TrailSurrogateDc80RightSquareBracketRightSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//RestorationOverRasurMarker:
		//	{RestorationOverRasurMarker} //'@v'
		//	"[[󰂀]]";
		public ParserRule getRule() { return rule; }

		//{RestorationOverRasurMarker} //'@v'
		//"[[󰂀]]"
		public Group getGroup() { return cGroup; }

		//{RestorationOverRasurMarker}
		public Action getRestorationOverRasurMarkerAction_0() { return cRestorationOverRasurMarkerAction_0; }

		////'@v'
		//"[[󰂀]]"
		public Keyword getLeftSquareBracketLeftSquareBracketLeadSurrogateDb80TrailSurrogateDc80RightSquareBracketRightSquareBracketKeyword_1() { return cLeftSquareBracketLeftSquareBracketLeadSurrogateDb80TrailSurrogateDc80RightSquareBracketRightSquareBracketKeyword_1; }
	}

	public class AncientExpandedMarkerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AncientExpandedMarker");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAncientExpandedMarkerAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisLeftParenthesisLeadSurrogateDb80TrailSurrogateDc80RightParenthesisRightParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//AncientExpandedMarker:
		//	{AncientExpandedMarker} //'@v'
		//	"((󰂀))";
		public ParserRule getRule() { return rule; }

		//{AncientExpandedMarker} //'@v'
		//"((󰂀))"
		public Group getGroup() { return cGroup; }

		//{AncientExpandedMarker}
		public Action getAncientExpandedMarkerAction_0() { return cAncientExpandedMarkerAction_0; }

		////'@v'
		//"((󰂀))"
		public Keyword getLeftParenthesisLeftParenthesisLeadSurrogateDb80TrailSurrogateDc80RightParenthesisRightParenthesisKeyword_1() { return cLeftParenthesisLeftParenthesisLeadSurrogateDb80TrailSurrogateDc80RightParenthesisRightParenthesisKeyword_1; }
	}

	public class RasurMarkerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RasurMarker");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAncientExpandedMarkerAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketLeftCurlyBracketLeadSurrogateDb80TrailSurrogateDc80RightCurlyBracketRightCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//RasurMarker:
		//	{AncientExpandedMarker} //'@v'
		//	"{{󰂀}}";
		public ParserRule getRule() { return rule; }

		//{AncientExpandedMarker} //'@v'
		//"{{󰂀}}"
		public Group getGroup() { return cGroup; }

		//{AncientExpandedMarker}
		public Action getAncientExpandedMarkerAction_0() { return cAncientExpandedMarkerAction_0; }

		////'@v'
		//"{{󰂀}}"
		public Keyword getLeftCurlyBracketLeftCurlyBracketLeadSurrogateDb80TrailSurrogateDc80RightCurlyBracketRightCurlyBracketKeyword_1() { return cLeftCurlyBracketLeftCurlyBracketLeadSurrogateDb80TrailSurrogateDc80RightCurlyBracketRightCurlyBracketKeyword_1; }
	}

	public class VersFrontierMarkerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VersFrontierMarker");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVersFrontierMarkerAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeadSurrogateDb80TrailSurrogateDc81Keyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//VersFrontierMarker:
		//	{VersFrontierMarker} //	'\uF0081'
		//	//'@mv'
		//	"󰂁";
		public ParserRule getRule() { return rule; }

		//{VersFrontierMarker} //	'\uF0081'
		////'@mv'
		//"󰂁"
		public Group getGroup() { return cGroup; }

		//{VersFrontierMarker}
		public Action getVersFrontierMarkerAction_0() { return cVersFrontierMarkerAction_0; }

		////	'\uF0081'
		////'@mv'
		//"󰂁"
		public Keyword getLeadSurrogateDb80TrailSurrogateDc81Keyword_1() { return cLeadSurrogateDb80TrailSurrogateDc81Keyword_1; }
	}

	public class VersbreakMarkerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VersbreakMarker");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVersbreakMarkerAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeadSurrogateDb80TrailSurrogateDc80Keyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//VersbreakMarker:
		//	{VersbreakMarker} //	'\uF0080'
		//	//'@v'
		//	"󰂀";
		public ParserRule getRule() { return rule; }

		//{VersbreakMarker} //	'\uF0080'
		////'@v'
		//"󰂀"
		public Group getGroup() { return cGroup; }

		//{VersbreakMarker}
		public Action getVersbreakMarkerAction_0() { return cVersbreakMarkerAction_0; }

		////	'\uF0080'
		////'@v'
		//"󰂀"
		public Keyword getLeadSurrogateDb80TrailSurrogateDc80Keyword_1() { return cLeadSurrogateDb80TrailSurrogateDc80Keyword_1; }
	}

	public class BrokenVersbreakMarkerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BrokenVersbreakMarker");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBrokenVersbreakMarkerAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeadSurrogateDb80TrailSurrogateDc82Keyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//BrokenVersbreakMarker:
		//	{BrokenVersbreakMarker} //'@v'
		//	"󰂂";
		public ParserRule getRule() { return rule; }

		//{BrokenVersbreakMarker} //'@v'
		//"󰂂"
		public Group getGroup() { return cGroup; }

		//{BrokenVersbreakMarker}
		public Action getBrokenVersbreakMarkerAction_0() { return cBrokenVersbreakMarkerAction_0; }

		////'@v'
		//"󰂂"
		public Keyword getLeadSurrogateDb80TrailSurrogateDc82Keyword_1() { return cLeadSurrogateDb80TrailSurrogateDc82Keyword_1; }
	}

	public class MarkerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Marker");
		private final Assignment cTypeAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cTypeBETWEEN_HASHESTerminalRuleCall_0 = (RuleCall)cTypeAssignment.eContents().get(0);
		
		//Marker:
		//	type=BETWEEN_HASHES;
		public ParserRule getRule() { return rule; }

		//type=BETWEEN_HASHES
		public Assignment getTypeAssignment() { return cTypeAssignment; }

		//BETWEEN_HASHES
		public RuleCall getTypeBETWEEN_HASHESTerminalRuleCall_0() { return cTypeBETWEEN_HASHESTerminalRuleCall_0; }
	}

	public class DestructionMarkerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DestructionMarker");
		private final Assignment cTypeAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cTypeBETWEEN_MINUSTerminalRuleCall_0 = (RuleCall)cTypeAssignment.eContents().get(0);
		
		//DestructionMarker:
		//	type=BETWEEN_MINUS;
		public ParserRule getRule() { return rule; }

		//type=BETWEEN_MINUS
		public Assignment getTypeAssignment() { return cTypeAssignment; }

		//BETWEEN_MINUS
		public RuleCall getTypeBETWEEN_MINUSTerminalRuleCall_0() { return cTypeBETWEEN_MINUSTerminalRuleCall_0; }
	}

	public class WordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Word");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cWordAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cWCharAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cWCharWordPartParserRuleCall_1_0 = (RuleCall)cWCharAssignment_1.eContents().get(0);
		
		//// word
		//Word:
		//	{Word} wChar+=WordPart+ //('-') (wChar+=WordPart)*
		//;
		public ParserRule getRule() { return rule; }

		//{Word} wChar+=WordPart+ //('-') (wChar+=WordPart)*
		public Group getGroup() { return cGroup; }

		//{Word}
		public Action getWordAction_0() { return cWordAction_0; }

		//wChar+=WordPart+
		public Assignment getWCharAssignment_1() { return cWCharAssignment_1; }

		//WordPart
		public RuleCall getWCharWordPartParserRuleCall_1_0() { return cWCharWordPartParserRuleCall_1_0; }
	}

	public class WordPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WordPart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEqualsSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cWCharAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cWCharWordMiddleParserRuleCall_1_0 = (RuleCall)cWCharAssignment_1.eContents().get(0);
		
		//WordPart:
		//	"="? wChar=WordMiddle // (wChar+=WordMiddle)*(wChar+=WordEnding)? (wChar+=WordEnding)?)	
		//;
		public ParserRule getRule() { return rule; }

		//"="? wChar=WordMiddle // (wChar+=WordMiddle)*(wChar+=WordEnding)? (wChar+=WordEnding)?)
		public Group getGroup() { return cGroup; }

		//"="?
		public Keyword getEqualsSignKeyword_0() { return cEqualsSignKeyword_0; }

		//wChar=WordMiddle
		public Assignment getWCharAssignment_1() { return cWCharAssignment_1; }

		//WordMiddle
		public RuleCall getWCharWordMiddleParserRuleCall_1_0() { return cWCharWordMiddleParserRuleCall_1_0; }
	}

	public class WordMiddleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WordMiddle");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBracketsParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCharsParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cInterfixParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//WordMiddle: //	{WordMiddle}
		//	Brackets | Chars | Interfix;
		public ParserRule getRule() { return rule; }

		////	{WordMiddle}
		//Brackets | Chars | Interfix
		public Alternatives getAlternatives() { return cAlternatives; }

		////	{WordMiddle}
		//Brackets
		public RuleCall getBracketsParserRuleCall_0() { return cBracketsParserRuleCall_0; }

		//Chars
		public RuleCall getCharsParserRuleCall_1() { return cCharsParserRuleCall_1; }

		//Interfix
		public RuleCall getInterfixParserRuleCall_2() { return cInterfixParserRuleCall_2; }
	}

	public class CharsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Chars");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameEGYSTRINGTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//// Chars...
		//Chars:
		//	name=EGYSTRING;
		public ParserRule getRule() { return rule; }

		//name=EGYSTRING
		public Assignment getNameAssignment() { return cNameAssignment; }

		//EGYSTRING
		public RuleCall getNameEGYSTRINGTerminalRuleCall_0() { return cNameEGYSTRINGTerminalRuleCall_0; }
	}

	public class BracketsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Brackets");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRasurParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAncientExpandedParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cRestorationOverRasurParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cExpandedColumnParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cExpandedParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cDisputableReadingParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cEmendationParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cLacunaParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cDeletionParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cPartialDestructionParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cCartoucheParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cOvalParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cSerechParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		
		//// textual criticism brackets
		//Brackets:
		//	Rasur | AncientExpanded | RestorationOverRasur | ExpandedColumn | Expanded | DisputableReading | Emendation | Lacuna
		//	| Deletion | PartialDestruction | Cartouche | Oval | Serech;
		public ParserRule getRule() { return rule; }

		//Rasur | AncientExpanded | RestorationOverRasur | ExpandedColumn | Expanded | DisputableReading | Emendation | Lacuna |
		//Deletion | PartialDestruction | Cartouche | Oval | Serech
		public Alternatives getAlternatives() { return cAlternatives; }

		//Rasur
		public RuleCall getRasurParserRuleCall_0() { return cRasurParserRuleCall_0; }

		//AncientExpanded
		public RuleCall getAncientExpandedParserRuleCall_1() { return cAncientExpandedParserRuleCall_1; }

		//RestorationOverRasur
		public RuleCall getRestorationOverRasurParserRuleCall_2() { return cRestorationOverRasurParserRuleCall_2; }

		//ExpandedColumn
		public RuleCall getExpandedColumnParserRuleCall_3() { return cExpandedColumnParserRuleCall_3; }

		//Expanded
		public RuleCall getExpandedParserRuleCall_4() { return cExpandedParserRuleCall_4; }

		//DisputableReading
		public RuleCall getDisputableReadingParserRuleCall_5() { return cDisputableReadingParserRuleCall_5; }

		//Emendation
		public RuleCall getEmendationParserRuleCall_6() { return cEmendationParserRuleCall_6; }

		//Lacuna
		public RuleCall getLacunaParserRuleCall_7() { return cLacunaParserRuleCall_7; }

		//Deletion
		public RuleCall getDeletionParserRuleCall_8() { return cDeletionParserRuleCall_8; }

		//PartialDestruction
		public RuleCall getPartialDestructionParserRuleCall_9() { return cPartialDestructionParserRuleCall_9; }

		//Cartouche
		public RuleCall getCartoucheParserRuleCall_10() { return cCartoucheParserRuleCall_10; }

		//Oval
		public RuleCall getOvalParserRuleCall_11() { return cOvalParserRuleCall_11; }

		//Serech
		public RuleCall getSerechParserRuleCall_12() { return cSerechParserRuleCall_12; }
	}

	public class OvalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Oval");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeadSurrogateD80cTrailSurrogateDe58Keyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cWCharAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cWCharNoCartoucheParserRuleCall_1_0 = (RuleCall)cWCharAssignment_1.eContents().get(0);
		private final Keyword cLeadSurrogateD80cTrailSurrogateDe82Keyword_2 = (Keyword)cGroup.eContents().get(2);
		
		////Cartouche2:
		////	'\u13379'   wChar+=NoCartouche+ '\u1337A'
		////;
		////Oval
		//Oval:
		//	"𓉘" wChar+=NoCartouche+ "𓊂";
		public ParserRule getRule() { return rule; }

		//"𓉘" wChar+=NoCartouche+ "𓊂"
		public Group getGroup() { return cGroup; }

		//"𓉘"
		public Keyword getLeadSurrogateD80cTrailSurrogateDe58Keyword_0() { return cLeadSurrogateD80cTrailSurrogateDe58Keyword_0; }

		//wChar+=NoCartouche+
		public Assignment getWCharAssignment_1() { return cWCharAssignment_1; }

		//NoCartouche
		public RuleCall getWCharNoCartoucheParserRuleCall_1_0() { return cWCharNoCartoucheParserRuleCall_1_0; }

		//"𓊂"
		public Keyword getLeadSurrogateD80cTrailSurrogateDe82Keyword_2() { return cLeadSurrogateD80cTrailSurrogateDe82Keyword_2; }
	}

	public class SerechElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Serech");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeadSurrogateD80cTrailSurrogateDf79Keyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cWCharAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cWCharNoCartoucheParserRuleCall_1_0 = (RuleCall)cWCharAssignment_1.eContents().get(0);
		private final Keyword cLeadSurrogateD80cTrailSurrogateDf7aKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//// eigentlich Serech
		//Serech:
		//	"𓍹" wChar+=NoCartouche+ "𓍺";
		public ParserRule getRule() { return rule; }

		//"𓍹" wChar+=NoCartouche+ "𓍺"
		public Group getGroup() { return cGroup; }

		//"𓍹"
		public Keyword getLeadSurrogateD80cTrailSurrogateDf79Keyword_0() { return cLeadSurrogateD80cTrailSurrogateDf79Keyword_0; }

		//wChar+=NoCartouche+
		public Assignment getWCharAssignment_1() { return cWCharAssignment_1; }

		//NoCartouche
		public RuleCall getWCharNoCartoucheParserRuleCall_1_0() { return cWCharNoCartoucheParserRuleCall_1_0; }

		//"𓍺"
		public Keyword getLeadSurrogateD80cTrailSurrogateDf7aKeyword_2() { return cLeadSurrogateD80cTrailSurrogateDf7aKeyword_2; }
	}

	public class CartoucheElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Cartouche");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExpandedAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeadSurrogateD80cTrailSurrogateDe86Keyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cWCharAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cWCharNoCartoucheParserRuleCall_2_0 = (RuleCall)cWCharAssignment_2.eContents().get(0);
		private final Keyword cLeadSurrogateD80cTrailSurrogateDe87Keyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Cartouche:
		//	{Expanded} "𓊆" wChar+=NoCartouche+ "𓊇";
		public ParserRule getRule() { return rule; }

		//{Expanded} "𓊆" wChar+=NoCartouche+ "𓊇"
		public Group getGroup() { return cGroup; }

		//{Expanded}
		public Action getExpandedAction_0() { return cExpandedAction_0; }

		//"𓊆"
		public Keyword getLeadSurrogateD80cTrailSurrogateDe86Keyword_1() { return cLeadSurrogateD80cTrailSurrogateDe86Keyword_1; }

		//wChar+=NoCartouche+
		public Assignment getWCharAssignment_2() { return cWCharAssignment_2; }

		//NoCartouche
		public RuleCall getWCharNoCartoucheParserRuleCall_2_0() { return cWCharNoCartoucheParserRuleCall_2_0; }

		//"𓊇"
		public Keyword getLeadSurrogateD80cTrailSurrogateDe87Keyword_3() { return cLeadSurrogateD80cTrailSurrogateDe87Keyword_3; }
	}

	public class NoCartoucheElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NoCartouche");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCharsParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRasurParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAncientExpandedParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cRestorationOverRasurParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cExpandedColumnParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cExpandedParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cDisputableReadingParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cEmendationParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cLacunaParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cDeletionParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cPartialDestructionParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cInterfixParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		
		//NoCartouche:
		//	Chars | Rasur | AncientExpanded | RestorationOverRasur | ExpandedColumn | Expanded | DisputableReading | Emendation |
		//	Lacuna | Deletion | PartialDestruction | Interfix;
		public ParserRule getRule() { return rule; }

		//Chars | Rasur | AncientExpanded | RestorationOverRasur | ExpandedColumn | Expanded | DisputableReading | Emendation |
		//Lacuna | Deletion | PartialDestruction | Interfix
		public Alternatives getAlternatives() { return cAlternatives; }

		//Chars
		public RuleCall getCharsParserRuleCall_0() { return cCharsParserRuleCall_0; }

		//Rasur
		public RuleCall getRasurParserRuleCall_1() { return cRasurParserRuleCall_1; }

		//AncientExpanded
		public RuleCall getAncientExpandedParserRuleCall_2() { return cAncientExpandedParserRuleCall_2; }

		//RestorationOverRasur
		public RuleCall getRestorationOverRasurParserRuleCall_3() { return cRestorationOverRasurParserRuleCall_3; }

		//ExpandedColumn
		public RuleCall getExpandedColumnParserRuleCall_4() { return cExpandedColumnParserRuleCall_4; }

		//Expanded
		public RuleCall getExpandedParserRuleCall_5() { return cExpandedParserRuleCall_5; }

		//DisputableReading
		public RuleCall getDisputableReadingParserRuleCall_6() { return cDisputableReadingParserRuleCall_6; }

		//Emendation
		public RuleCall getEmendationParserRuleCall_7() { return cEmendationParserRuleCall_7; }

		//Lacuna
		public RuleCall getLacunaParserRuleCall_8() { return cLacunaParserRuleCall_8; }

		//Deletion
		public RuleCall getDeletionParserRuleCall_9() { return cDeletionParserRuleCall_9; }

		//PartialDestruction
		public RuleCall getPartialDestructionParserRuleCall_10() { return cPartialDestructionParserRuleCall_10; }

		//Interfix
		public RuleCall getInterfixParserRuleCall_11() { return cInterfixParserRuleCall_11; }
	}

	public class ExpandedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expanded");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExpandedAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cWCharAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cWCharNoExpandedParserRuleCall_2_0 = (RuleCall)cWCharAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Expanded:
		//	{Expanded} "(" wChar+=NoExpanded+ ")";
		public ParserRule getRule() { return rule; }

		//{Expanded} "(" wChar+=NoExpanded+ ")"
		public Group getGroup() { return cGroup; }

		//{Expanded}
		public Action getExpandedAction_0() { return cExpandedAction_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//wChar+=NoExpanded+
		public Assignment getWCharAssignment_2() { return cWCharAssignment_2; }

		//NoExpanded
		public RuleCall getWCharNoExpandedParserRuleCall_2_0() { return cWCharNoExpandedParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class NoExpandedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NoExpanded");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCharsParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cInterfixParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDisputableReadingParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//NoExpanded:
		//	Chars | Interfix | DisputableReading;
		public ParserRule getRule() { return rule; }

		//Chars | Interfix | DisputableReading
		public Alternatives getAlternatives() { return cAlternatives; }

		//Chars
		public RuleCall getCharsParserRuleCall_0() { return cCharsParserRuleCall_0; }

		//Interfix
		public RuleCall getInterfixParserRuleCall_1() { return cInterfixParserRuleCall_1; }

		//DisputableReading
		public RuleCall getDisputableReadingParserRuleCall_2() { return cDisputableReadingParserRuleCall_2; }
	}

	public class EmendationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Emendation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEmendationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftPointingAngleBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cWCharAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cWCharNoEmendationParserRuleCall_2_0 = (RuleCall)cWCharAssignment_2.eContents().get(0);
		private final Keyword cRightPointingAngleBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Emendation:
		//	{Emendation} "〈" wChar+=NoEmendation+ "〉";
		public ParserRule getRule() { return rule; }

		//{Emendation} "〈" wChar+=NoEmendation+ "〉"
		public Group getGroup() { return cGroup; }

		//{Emendation}
		public Action getEmendationAction_0() { return cEmendationAction_0; }

		//"〈"
		public Keyword getLeftPointingAngleBracketKeyword_1() { return cLeftPointingAngleBracketKeyword_1; }

		//wChar+=NoEmendation+
		public Assignment getWCharAssignment_2() { return cWCharAssignment_2; }

		//NoEmendation
		public RuleCall getWCharNoEmendationParserRuleCall_2_0() { return cWCharNoEmendationParserRuleCall_2_0; }

		//"〉"
		public Keyword getRightPointingAngleBracketKeyword_3() { return cRightPointingAngleBracketKeyword_3; }
	}

	public class NoEmendationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NoEmendation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCharsParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExpandedParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cInterfixParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDisputableReadingParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//NoEmendation:
		//	Chars | Expanded | Interfix | DisputableReading;
		public ParserRule getRule() { return rule; }

		//Chars | Expanded | Interfix | DisputableReading
		public Alternatives getAlternatives() { return cAlternatives; }

		//Chars
		public RuleCall getCharsParserRuleCall_0() { return cCharsParserRuleCall_0; }

		//Expanded
		public RuleCall getExpandedParserRuleCall_1() { return cExpandedParserRuleCall_1; }

		//Interfix
		public RuleCall getInterfixParserRuleCall_2() { return cInterfixParserRuleCall_2; }

		//DisputableReading
		public RuleCall getDisputableReadingParserRuleCall_3() { return cDisputableReadingParserRuleCall_3; }
	}

	public class DisputableReadingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DisputableReading");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDisputableReadingAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cReversedQuestionMarkKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cWCharAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cWCharNoDisputableReadingParserRuleCall_2_0 = (RuleCall)cWCharAssignment_2.eContents().get(0);
		private final Keyword cQuestionMarkKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//DisputableReading:
		//	{DisputableReading} "⸮" wChar+=NoDisputableReading+ "?";
		public ParserRule getRule() { return rule; }

		//{DisputableReading} "⸮" wChar+=NoDisputableReading+ "?"
		public Group getGroup() { return cGroup; }

		//{DisputableReading}
		public Action getDisputableReadingAction_0() { return cDisputableReadingAction_0; }

		//"⸮"
		public Keyword getReversedQuestionMarkKeyword_1() { return cReversedQuestionMarkKeyword_1; }

		//wChar+=NoDisputableReading+
		public Assignment getWCharAssignment_2() { return cWCharAssignment_2; }

		//NoDisputableReading
		public RuleCall getWCharNoDisputableReadingParserRuleCall_2_0() { return cWCharNoDisputableReadingParserRuleCall_2_0; }

		//"?"
		public Keyword getQuestionMarkKeyword_3() { return cQuestionMarkKeyword_3; }
	}

	public class NoDisputableReadingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NoDisputableReading");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExpandedParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEmendationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDeletionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cRasurParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cAncientExpandedParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cRestorationOverRasurParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cExpandedColumnParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cLacunaParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cPartialDestructionParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cCharsParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cInterfixParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		
		//NoDisputableReading:
		//	Expanded | Emendation | Deletion | Rasur | AncientExpanded | RestorationOverRasur | ExpandedColumn | Lacuna |
		//	PartialDestruction | Chars | Interfix;
		public ParserRule getRule() { return rule; }

		//Expanded | Emendation | Deletion | Rasur | AncientExpanded | RestorationOverRasur | ExpandedColumn | Lacuna |
		//PartialDestruction | Chars | Interfix
		public Alternatives getAlternatives() { return cAlternatives; }

		//Expanded
		public RuleCall getExpandedParserRuleCall_0() { return cExpandedParserRuleCall_0; }

		//Emendation
		public RuleCall getEmendationParserRuleCall_1() { return cEmendationParserRuleCall_1; }

		//Deletion
		public RuleCall getDeletionParserRuleCall_2() { return cDeletionParserRuleCall_2; }

		//Rasur
		public RuleCall getRasurParserRuleCall_3() { return cRasurParserRuleCall_3; }

		//AncientExpanded
		public RuleCall getAncientExpandedParserRuleCall_4() { return cAncientExpandedParserRuleCall_4; }

		//RestorationOverRasur
		public RuleCall getRestorationOverRasurParserRuleCall_5() { return cRestorationOverRasurParserRuleCall_5; }

		//ExpandedColumn
		public RuleCall getExpandedColumnParserRuleCall_6() { return cExpandedColumnParserRuleCall_6; }

		//Lacuna
		public RuleCall getLacunaParserRuleCall_7() { return cLacunaParserRuleCall_7; }

		//PartialDestruction
		public RuleCall getPartialDestructionParserRuleCall_8() { return cPartialDestructionParserRuleCall_8; }

		//Chars
		public RuleCall getCharsParserRuleCall_9() { return cCharsParserRuleCall_9; }

		//Interfix
		public RuleCall getInterfixParserRuleCall_10() { return cInterfixParserRuleCall_10; }
	}

	public class LacunaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Lacuna");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLacunaAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cWCharAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cWCharNoLacunaParserRuleCall_2_0 = (RuleCall)cWCharAssignment_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Lacuna:
		//	{Lacuna} "[" wChar+=NoLacuna+ "]";
		public ParserRule getRule() { return rule; }

		//{Lacuna} "[" wChar+=NoLacuna+ "]"
		public Group getGroup() { return cGroup; }

		//{Lacuna}
		public Action getLacunaAction_0() { return cLacunaAction_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }

		//wChar+=NoLacuna+
		public Assignment getWCharAssignment_2() { return cWCharAssignment_2; }

		//NoLacuna
		public RuleCall getWCharNoLacunaParserRuleCall_2_0() { return cWCharNoLacunaParserRuleCall_2_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}

	public class NoLacunaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NoLacuna");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExpandedParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCharsParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cInterfixParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDisputableReadingParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cCartoucheParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cOvalParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cSerechParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//NoLacuna:
		//	Expanded | Chars | Interfix | DisputableReading | Cartouche | Oval | Serech;
		public ParserRule getRule() { return rule; }

		//Expanded | Chars | Interfix | DisputableReading | Cartouche | Oval | Serech
		public Alternatives getAlternatives() { return cAlternatives; }

		//Expanded
		public RuleCall getExpandedParserRuleCall_0() { return cExpandedParserRuleCall_0; }

		//Chars
		public RuleCall getCharsParserRuleCall_1() { return cCharsParserRuleCall_1; }

		//Interfix
		public RuleCall getInterfixParserRuleCall_2() { return cInterfixParserRuleCall_2; }

		//DisputableReading
		public RuleCall getDisputableReadingParserRuleCall_3() { return cDisputableReadingParserRuleCall_3; }

		//Cartouche
		public RuleCall getCartoucheParserRuleCall_4() { return cCartoucheParserRuleCall_4; }

		//Oval
		public RuleCall getOvalParserRuleCall_5() { return cOvalParserRuleCall_5; }

		//Serech
		public RuleCall getSerechParserRuleCall_6() { return cSerechParserRuleCall_6; }
	}

	public class DeletionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Deletion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDeletionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cWCharAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cWCharNoDeletionParserRuleCall_2_0 = (RuleCall)cWCharAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Deletion:
		//	{Deletion} "{" wChar+=NoDeletion+ "}";
		public ParserRule getRule() { return rule; }

		//{Deletion} "{" wChar+=NoDeletion+ "}"
		public Group getGroup() { return cGroup; }

		//{Deletion}
		public Action getDeletionAction_0() { return cDeletionAction_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//wChar+=NoDeletion+
		public Assignment getWCharAssignment_2() { return cWCharAssignment_2; }

		//NoDeletion
		public RuleCall getWCharNoDeletionParserRuleCall_2_0() { return cWCharNoDeletionParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class NoDeletionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NoDeletion");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCharsParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPartialDestructionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cExpandedParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cInterfixParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cDisputableReadingParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cLacunaParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cRestorationOverRasurParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cAncientExpandedParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		
		//NoDeletion:
		//	Chars | PartialDestruction | Expanded | Interfix | DisputableReading | Lacuna | RestorationOverRasur |
		//	AncientExpanded;
		public ParserRule getRule() { return rule; }

		//Chars | PartialDestruction | Expanded | Interfix | DisputableReading | Lacuna | RestorationOverRasur | AncientExpanded
		public Alternatives getAlternatives() { return cAlternatives; }

		//Chars
		public RuleCall getCharsParserRuleCall_0() { return cCharsParserRuleCall_0; }

		//PartialDestruction
		public RuleCall getPartialDestructionParserRuleCall_1() { return cPartialDestructionParserRuleCall_1; }

		//Expanded
		public RuleCall getExpandedParserRuleCall_2() { return cExpandedParserRuleCall_2; }

		//Interfix
		public RuleCall getInterfixParserRuleCall_3() { return cInterfixParserRuleCall_3; }

		//DisputableReading
		public RuleCall getDisputableReadingParserRuleCall_4() { return cDisputableReadingParserRuleCall_4; }

		//Lacuna
		public RuleCall getLacunaParserRuleCall_5() { return cLacunaParserRuleCall_5; }

		//RestorationOverRasur
		public RuleCall getRestorationOverRasurParserRuleCall_6() { return cRestorationOverRasurParserRuleCall_6; }

		//AncientExpanded
		public RuleCall getAncientExpandedParserRuleCall_7() { return cAncientExpandedParserRuleCall_7; }
	}

	public class ExpandedColumnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExpandedColumn");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExpandedColumnAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftPointingAngleBracketLeftPointingAngleBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cWCharAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cWCharNoExpandedColumnParserRuleCall_2_0 = (RuleCall)cWCharAssignment_2.eContents().get(0);
		private final Keyword cRightPointingAngleBracketRightPointingAngleBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ExpandedColumn:
		//	{ExpandedColumn} "〈〈" wChar+=NoExpandedColumn+ "〉〉";
		public ParserRule getRule() { return rule; }

		//{ExpandedColumn} "〈〈" wChar+=NoExpandedColumn+ "〉〉"
		public Group getGroup() { return cGroup; }

		//{ExpandedColumn}
		public Action getExpandedColumnAction_0() { return cExpandedColumnAction_0; }

		//"〈〈"
		public Keyword getLeftPointingAngleBracketLeftPointingAngleBracketKeyword_1() { return cLeftPointingAngleBracketLeftPointingAngleBracketKeyword_1; }

		//wChar+=NoExpandedColumn+
		public Assignment getWCharAssignment_2() { return cWCharAssignment_2; }

		//NoExpandedColumn
		public RuleCall getWCharNoExpandedColumnParserRuleCall_2_0() { return cWCharNoExpandedColumnParserRuleCall_2_0; }

		//"〉〉"
		public Keyword getRightPointingAngleBracketRightPointingAngleBracketKeyword_3() { return cRightPointingAngleBracketRightPointingAngleBracketKeyword_3; }
	}

	public class NoExpandedColumnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NoExpandedColumn");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCharsParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExpandedParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cInterfixParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDisputableReadingParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//NoExpandedColumn:
		//	Chars | Expanded | Interfix | DisputableReading;
		public ParserRule getRule() { return rule; }

		//Chars | Expanded | Interfix | DisputableReading
		public Alternatives getAlternatives() { return cAlternatives; }

		//Chars
		public RuleCall getCharsParserRuleCall_0() { return cCharsParserRuleCall_0; }

		//Expanded
		public RuleCall getExpandedParserRuleCall_1() { return cExpandedParserRuleCall_1; }

		//Interfix
		public RuleCall getInterfixParserRuleCall_2() { return cInterfixParserRuleCall_2; }

		//DisputableReading
		public RuleCall getDisputableReadingParserRuleCall_3() { return cDisputableReadingParserRuleCall_3; }
	}

	public class RasurElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Rasur");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRasurAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cWCharAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cWCharNoRasurParserRuleCall_2_0 = (RuleCall)cWCharAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Rasur:
		//	{Rasur} "{{" wChar+=NoRasur+ "}}";
		public ParserRule getRule() { return rule; }

		//{Rasur} "{{" wChar+=NoRasur+ "}}"
		public Group getGroup() { return cGroup; }

		//{Rasur}
		public Action getRasurAction_0() { return cRasurAction_0; }

		//"{{"
		public Keyword getLeftCurlyBracketLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketLeftCurlyBracketKeyword_1; }

		//wChar+=NoRasur+
		public Assignment getWCharAssignment_2() { return cWCharAssignment_2; }

		//NoRasur
		public RuleCall getWCharNoRasurParserRuleCall_2_0() { return cWCharNoRasurParserRuleCall_2_0; }

		//"}}"
		public Keyword getRightCurlyBracketRightCurlyBracketKeyword_3() { return cRightCurlyBracketRightCurlyBracketKeyword_3; }
	}

	public class NoRasurElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NoRasur");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCharsParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExpandedParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cInterfixParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDisputableReadingParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//NoRasur:
		//	Chars | Expanded | Interfix | DisputableReading;
		public ParserRule getRule() { return rule; }

		//Chars | Expanded | Interfix | DisputableReading
		public Alternatives getAlternatives() { return cAlternatives; }

		//Chars
		public RuleCall getCharsParserRuleCall_0() { return cCharsParserRuleCall_0; }

		//Expanded
		public RuleCall getExpandedParserRuleCall_1() { return cExpandedParserRuleCall_1; }

		//Interfix
		public RuleCall getInterfixParserRuleCall_2() { return cInterfixParserRuleCall_2; }

		//DisputableReading
		public RuleCall getDisputableReadingParserRuleCall_3() { return cDisputableReadingParserRuleCall_3; }
	}

	public class AncientExpandedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AncientExpanded");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAncientExpandedAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cWCharAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cWCharNoAncientExpandedParserRuleCall_2_0 = (RuleCall)cWCharAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//AncientExpanded:
		//	{AncientExpanded} "((" wChar+=NoAncientExpanded+ "))";
		public ParserRule getRule() { return rule; }

		//{AncientExpanded} "((" wChar+=NoAncientExpanded+ "))"
		public Group getGroup() { return cGroup; }

		//{AncientExpanded}
		public Action getAncientExpandedAction_0() { return cAncientExpandedAction_0; }

		//"(("
		public Keyword getLeftParenthesisLeftParenthesisKeyword_1() { return cLeftParenthesisLeftParenthesisKeyword_1; }

		//wChar+=NoAncientExpanded+
		public Assignment getWCharAssignment_2() { return cWCharAssignment_2; }

		//NoAncientExpanded
		public RuleCall getWCharNoAncientExpandedParserRuleCall_2_0() { return cWCharNoAncientExpandedParserRuleCall_2_0; }

		//"))"
		public Keyword getRightParenthesisRightParenthesisKeyword_3() { return cRightParenthesisRightParenthesisKeyword_3; }
	}

	public class NoAncientExpandedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NoAncientExpanded");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCharsParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExpandedParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cInterfixParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDisputableReadingParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//NoAncientExpanded:
		//	Chars | Expanded | Interfix | DisputableReading;
		public ParserRule getRule() { return rule; }

		//Chars | Expanded | Interfix | DisputableReading
		public Alternatives getAlternatives() { return cAlternatives; }

		//Chars
		public RuleCall getCharsParserRuleCall_0() { return cCharsParserRuleCall_0; }

		//Expanded
		public RuleCall getExpandedParserRuleCall_1() { return cExpandedParserRuleCall_1; }

		//Interfix
		public RuleCall getInterfixParserRuleCall_2() { return cInterfixParserRuleCall_2; }

		//DisputableReading
		public RuleCall getDisputableReadingParserRuleCall_3() { return cDisputableReadingParserRuleCall_3; }
	}

	public class RestorationOverRasurElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RestorationOverRasur");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRestorationOverRasurAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cWCharAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cWCharNoRestorationOverRasurParserRuleCall_2_0 = (RuleCall)cWCharAssignment_2.eContents().get(0);
		private final Keyword cRightSquareBracketRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//RestorationOverRasur:
		//	{RestorationOverRasur} "[[" wChar+=NoRestorationOverRasur+ "]]";
		public ParserRule getRule() { return rule; }

		//{RestorationOverRasur} "[[" wChar+=NoRestorationOverRasur+ "]]"
		public Group getGroup() { return cGroup; }

		//{RestorationOverRasur}
		public Action getRestorationOverRasurAction_0() { return cRestorationOverRasurAction_0; }

		//"[["
		public Keyword getLeftSquareBracketLeftSquareBracketKeyword_1() { return cLeftSquareBracketLeftSquareBracketKeyword_1; }

		//wChar+=NoRestorationOverRasur+
		public Assignment getWCharAssignment_2() { return cWCharAssignment_2; }

		//NoRestorationOverRasur
		public RuleCall getWCharNoRestorationOverRasurParserRuleCall_2_0() { return cWCharNoRestorationOverRasurParserRuleCall_2_0; }

		//"]]"
		public Keyword getRightSquareBracketRightSquareBracketKeyword_3() { return cRightSquareBracketRightSquareBracketKeyword_3; }
	}

	public class NoRestorationOverRasurElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NoRestorationOverRasur");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCharsParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExpandedParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cInterfixParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDisputableReadingParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cCartoucheParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//NoRestorationOverRasur:
		//	Chars | Expanded | Interfix | DisputableReading | Cartouche;
		public ParserRule getRule() { return rule; }

		//Chars | Expanded | Interfix | DisputableReading | Cartouche
		public Alternatives getAlternatives() { return cAlternatives; }

		//Chars
		public RuleCall getCharsParserRuleCall_0() { return cCharsParserRuleCall_0; }

		//Expanded
		public RuleCall getExpandedParserRuleCall_1() { return cExpandedParserRuleCall_1; }

		//Interfix
		public RuleCall getInterfixParserRuleCall_2() { return cInterfixParserRuleCall_2; }

		//DisputableReading
		public RuleCall getDisputableReadingParserRuleCall_3() { return cDisputableReadingParserRuleCall_3; }

		//Cartouche
		public RuleCall getCartoucheParserRuleCall_4() { return cCartoucheParserRuleCall_4; }
	}

	public class PartialDestructionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PartialDestruction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPartialDestructionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTopLeftHalfBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cWCharAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cWCharNoPartialDestructionParserRuleCall_2_0 = (RuleCall)cWCharAssignment_2.eContents().get(0);
		private final Keyword cTopRightHalfBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//PartialDestruction:
		//	{PartialDestruction} "⸢" wChar+=NoPartialDestruction+ "⸣";
		public ParserRule getRule() { return rule; }

		//{PartialDestruction} "⸢" wChar+=NoPartialDestruction+ "⸣"
		public Group getGroup() { return cGroup; }

		//{PartialDestruction}
		public Action getPartialDestructionAction_0() { return cPartialDestructionAction_0; }

		//"⸢"
		public Keyword getTopLeftHalfBracketKeyword_1() { return cTopLeftHalfBracketKeyword_1; }

		//wChar+=NoPartialDestruction+
		public Assignment getWCharAssignment_2() { return cWCharAssignment_2; }

		//NoPartialDestruction
		public RuleCall getWCharNoPartialDestructionParserRuleCall_2_0() { return cWCharNoPartialDestructionParserRuleCall_2_0; }

		//"⸣"
		public Keyword getTopRightHalfBracketKeyword_3() { return cTopRightHalfBracketKeyword_3; }
	}

	public class NoPartialDestructionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NoPartialDestruction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCharsParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDeletionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cExpandedParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDisputableReadingParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cInterfixParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cCartoucheParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cOvalParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cSerechParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		
		//NoPartialDestruction:
		//	Chars | Deletion | Expanded | DisputableReading | Interfix | Cartouche | Oval | Serech;
		public ParserRule getRule() { return rule; }

		//Chars | Deletion | Expanded | DisputableReading | Interfix | Cartouche | Oval | Serech
		public Alternatives getAlternatives() { return cAlternatives; }

		//Chars
		public RuleCall getCharsParserRuleCall_0() { return cCharsParserRuleCall_0; }

		//Deletion
		public RuleCall getDeletionParserRuleCall_1() { return cDeletionParserRuleCall_1; }

		//Expanded
		public RuleCall getExpandedParserRuleCall_2() { return cExpandedParserRuleCall_2; }

		//DisputableReading
		public RuleCall getDisputableReadingParserRuleCall_3() { return cDisputableReadingParserRuleCall_3; }

		//Interfix
		public RuleCall getInterfixParserRuleCall_4() { return cInterfixParserRuleCall_4; }

		//Cartouche
		public RuleCall getCartoucheParserRuleCall_5() { return cCartoucheParserRuleCall_5; }

		//Oval
		public RuleCall getOvalParserRuleCall_6() { return cOvalParserRuleCall_6; }

		//Serech
		public RuleCall getSerechParserRuleCall_7() { return cSerechParserRuleCall_7; }
	}

	public class InterfixElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Interfix");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInterfixFlexionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cInterfixLexicalParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cInterfixSuffixPronomLexicalParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cInterfixPrefixNonLexicalParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cInterfixPrefixLexicalParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cInterfixConnectionSyllabicGroupParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cInterfixCompoundWordsParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cInterfixPhoneticalComplementParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		
		//// textual criticism interfixes
		//Interfix:
		//	InterfixFlexion | InterfixLexical | InterfixSuffixPronomLexical | InterfixPrefixNonLexical | InterfixPrefixLexical |
		//	InterfixConnectionSyllabicGroup | InterfixCompoundWords | InterfixPhoneticalComplement;
		public ParserRule getRule() { return rule; }

		//InterfixFlexion | InterfixLexical | InterfixSuffixPronomLexical | InterfixPrefixNonLexical | InterfixPrefixLexical |
		//InterfixConnectionSyllabicGroup | InterfixCompoundWords | InterfixPhoneticalComplement
		public Alternatives getAlternatives() { return cAlternatives; }

		//InterfixFlexion
		public RuleCall getInterfixFlexionParserRuleCall_0() { return cInterfixFlexionParserRuleCall_0; }

		//InterfixLexical
		public RuleCall getInterfixLexicalParserRuleCall_1() { return cInterfixLexicalParserRuleCall_1; }

		//InterfixSuffixPronomLexical
		public RuleCall getInterfixSuffixPronomLexicalParserRuleCall_2() { return cInterfixSuffixPronomLexicalParserRuleCall_2; }

		//InterfixPrefixNonLexical
		public RuleCall getInterfixPrefixNonLexicalParserRuleCall_3() { return cInterfixPrefixNonLexicalParserRuleCall_3; }

		//InterfixPrefixLexical
		public RuleCall getInterfixPrefixLexicalParserRuleCall_4() { return cInterfixPrefixLexicalParserRuleCall_4; }

		//InterfixConnectionSyllabicGroup
		public RuleCall getInterfixConnectionSyllabicGroupParserRuleCall_5() { return cInterfixConnectionSyllabicGroupParserRuleCall_5; }

		//InterfixCompoundWords
		public RuleCall getInterfixCompoundWordsParserRuleCall_6() { return cInterfixCompoundWordsParserRuleCall_6; }

		//InterfixPhoneticalComplement
		public RuleCall getInterfixPhoneticalComplementParserRuleCall_7() { return cInterfixPhoneticalComplementParserRuleCall_7; }
	}

	public class InterfixLexicalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InterfixLexical");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInterfixLexicalAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCommaKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//InterfixLexical:
		//	{InterfixLexical} ",";
		public ParserRule getRule() { return rule; }

		//{InterfixLexical} ","
		public Group getGroup() { return cGroup; }

		//{InterfixLexical}
		public Action getInterfixLexicalAction_0() { return cInterfixLexicalAction_0; }

		//","
		public Keyword getCommaKeyword_1() { return cCommaKeyword_1; }
	}

	public class InterfixFlexionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InterfixFlexion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInterfixFlexionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//InterfixFlexion:
		//	{InterfixFlexion} ".";
		public ParserRule getRule() { return rule; }

		//{InterfixFlexion} "."
		public Group getGroup() { return cGroup; }

		//{InterfixFlexion}
		public Action getInterfixFlexionAction_0() { return cInterfixFlexionAction_0; }

		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
	}

	public class InterfixSuffixPronomLexicalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InterfixSuffixPronomLexical");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInterfixSuffixPronomLexicalAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIdenticalToKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//InterfixSuffixPronomLexical:
		//	{InterfixSuffixPronomLexical} "≡";
		public ParserRule getRule() { return rule; }

		//{InterfixSuffixPronomLexical} "≡"
		public Group getGroup() { return cGroup; }

		//{InterfixSuffixPronomLexical}
		public Action getInterfixSuffixPronomLexicalAction_0() { return cInterfixSuffixPronomLexicalAction_0; }

		//"≡"
		public Keyword getIdenticalToKeyword_1() { return cIdenticalToKeyword_1; }
	}

	public class InterfixPrefixNonLexicalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InterfixPrefixNonLexical");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInterfixPrefixNonLexicalAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//InterfixPrefixNonLexical:
		//	{InterfixPrefixNonLexical} ":";
		public ParserRule getRule() { return rule; }

		//{InterfixPrefixNonLexical} ":"
		public Group getGroup() { return cGroup; }

		//{InterfixPrefixNonLexical}
		public Action getInterfixPrefixNonLexicalAction_0() { return cInterfixPrefixNonLexicalAction_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
	}

	public class InterfixPrefixLexicalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InterfixPrefixLexical");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInterfixPrefixLexicalAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cVerticalEllipsisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//InterfixPrefixLexical:
		//	{InterfixPrefixLexical} "⋮";
		public ParserRule getRule() { return rule; }

		//{InterfixPrefixLexical} "⋮"
		public Group getGroup() { return cGroup; }

		//{InterfixPrefixLexical}
		public Action getInterfixPrefixLexicalAction_0() { return cInterfixPrefixLexicalAction_0; }

		//"⋮"
		public Keyword getVerticalEllipsisKeyword_1() { return cVerticalEllipsisKeyword_1; }
	}

	public class InterfixConnectionSyllabicGroupElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InterfixConnectionSyllabicGroup");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInterfixConnectionSyllabicGroupAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTildeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//InterfixConnectionSyllabicGroup:
		//	{InterfixConnectionSyllabicGroup} "~";
		public ParserRule getRule() { return rule; }

		//{InterfixConnectionSyllabicGroup} "~"
		public Group getGroup() { return cGroup; }

		//{InterfixConnectionSyllabicGroup}
		public Action getInterfixConnectionSyllabicGroupAction_0() { return cInterfixConnectionSyllabicGroupAction_0; }

		//"~"
		public Keyword getTildeKeyword_1() { return cTildeKeyword_1; }
	}

	public class InterfixCompoundWordsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InterfixCompoundWords");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInterfixCompoundWordsAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//InterfixCompoundWords:
		//	{InterfixCompoundWords} "-";
		public ParserRule getRule() { return rule; }

		//{InterfixCompoundWords} "-"
		public Group getGroup() { return cGroup; }

		//{InterfixCompoundWords}
		public Action getInterfixCompoundWordsAction_0() { return cInterfixCompoundWordsAction_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
	}

	public class InterfixPhoneticalComplementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InterfixPhoneticalComplement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInterfixPhoneticalComplementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//InterfixPhoneticalComplement:
		//	{InterfixPhoneticalComplement} ";";
		public ParserRule getRule() { return rule; }

		//{InterfixPhoneticalComplement} ";"
		public Group getGroup() { return cGroup; }

		//{InterfixPhoneticalComplement}
		public Action getInterfixPhoneticalComplementAction_0() { return cInterfixPhoneticalComplementAction_0; }

		//";"
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}
	
	
	private TextContentElements pTextContent;
	private TextItemElements pTextItem;
	private SentenceElements pSentence;
	private SentenceItemElements pSentenceItem;
	private AbstractMarkerElements pAbstractMarker;
	private TerminalRule tNEWLINE;
	private AmbivalenceElements pAmbivalence;
	private CaseElements pCase;
	private TerminalRule tCASESTRING;
	private SentenceItemNoAmbivalenceElements pSentenceItemNoAmbivalence;
	private VersMarkerElements pVersMarker;
	private DisputableVersMarkerElements pDisputableVersMarker;
	private DeletedVersMarkerElements pDeletedVersMarker;
	private DestroyedVersMarkerElements pDestroyedVersMarker;
	private MissingVersMarkerElements pMissingVersMarker;
	private RestorationOverRasurMarkerElements pRestorationOverRasurMarker;
	private AncientExpandedMarkerElements pAncientExpandedMarker;
	private RasurMarkerElements pRasurMarker;
	private VersFrontierMarkerElements pVersFrontierMarker;
	private VersbreakMarkerElements pVersbreakMarker;
	private BrokenVersbreakMarkerElements pBrokenVersbreakMarker;
	private MarkerElements pMarker;
	private TerminalRule tBETWEEN_HASHES;
	private DestructionMarkerElements pDestructionMarker;
	private TerminalRule tBETWEEN_MINUS;
	private WordElements pWord;
	private WordPartElements pWordPart;
	private WordMiddleElements pWordMiddle;
	private CharsElements pChars;
	private TerminalRule tEGYSTRING;
	private BracketsElements pBrackets;
	private OvalElements pOval;
	private SerechElements pSerech;
	private CartoucheElements pCartouche;
	private NoCartoucheElements pNoCartouche;
	private ExpandedElements pExpanded;
	private NoExpandedElements pNoExpanded;
	private EmendationElements pEmendation;
	private NoEmendationElements pNoEmendation;
	private DisputableReadingElements pDisputableReading;
	private NoDisputableReadingElements pNoDisputableReading;
	private LacunaElements pLacuna;
	private NoLacunaElements pNoLacuna;
	private DeletionElements pDeletion;
	private NoDeletionElements pNoDeletion;
	private ExpandedColumnElements pExpandedColumn;
	private NoExpandedColumnElements pNoExpandedColumn;
	private RasurElements pRasur;
	private NoRasurElements pNoRasur;
	private AncientExpandedElements pAncientExpanded;
	private NoAncientExpandedElements pNoAncientExpanded;
	private RestorationOverRasurElements pRestorationOverRasur;
	private NoRestorationOverRasurElements pNoRestorationOverRasur;
	private PartialDestructionElements pPartialDestruction;
	private NoPartialDestructionElements pNoPartialDestruction;
	private InterfixElements pInterfix;
	private InterfixLexicalElements pInterfixLexical;
	private InterfixFlexionElements pInterfixFlexion;
	private InterfixSuffixPronomLexicalElements pInterfixSuffixPronomLexical;
	private InterfixPrefixNonLexicalElements pInterfixPrefixNonLexical;
	private InterfixPrefixLexicalElements pInterfixPrefixLexical;
	private InterfixConnectionSyllabicGroupElements pInterfixConnectionSyllabicGroup;
	private InterfixCompoundWordsElements pInterfixCompoundWords;
	private InterfixPhoneticalComplementElements pInterfixPhoneticalComplement;
	
	private final Grammar grammar;

	@Inject
	public EgyDslGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.bbaw.bts.corpus.text.egy.EgyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//TextContent:
	//	{TextContent} (items+=TextItem ((" " | NEWLINE)? items+=TextItem)*);
	public TextContentElements getTextContentAccess() {
		return (pTextContent != null) ? pTextContent : (pTextContent = new TextContentElements());
	}
	
	public ParserRule getTextContentRule() {
		return getTextContentAccess().getRule();
	}

	//TextItem:
	//	Sentence;
	public TextItemElements getTextItemAccess() {
		return (pTextItem != null) ? pTextItem : (pTextItem = new TextItemElements());
	}
	
	public ParserRule getTextItemRule() {
		return getTextItemAccess().getRule();
	}

	//// sentence	
	//Sentence:
	//	{Sentence} "§" (items+=SentenceItem (" " NEWLINE? items+=SentenceItem)*)? "§";
	public SentenceElements getSentenceAccess() {
		return (pSentence != null) ? pSentence : (pSentence = new SentenceElements());
	}
	
	public ParserRule getSentenceRule() {
		return getSentenceAccess().getRule();
	}

	//SentenceItem:
	//	Word | AbstractMarker | Ambivalence;
	public SentenceItemElements getSentenceItemAccess() {
		return (pSentenceItem != null) ? pSentenceItem : (pSentenceItem = new SentenceItemElements());
	}
	
	public ParserRule getSentenceItemRule() {
		return getSentenceItemAccess().getRule();
	}

	//AbstractMarker:
	//	Marker | VersMarker | DestructionMarker;
	public AbstractMarkerElements getAbstractMarkerAccess() {
		return (pAbstractMarker != null) ? pAbstractMarker : (pAbstractMarker = new AbstractMarkerElements());
	}
	
	public ParserRule getAbstractMarkerRule() {
		return getAbstractMarkerAccess().getRule();
	}

	//terminal NEWLINE:
	//	("\r" // New line on DOS or Unix 
	//	| "\n" | "\t")+;
	public TerminalRule getNEWLINERule() {
		return (tNEWLINE != null) ? tNEWLINE : (tNEWLINE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "NEWLINE"));
	} 

	//Ambivalence:
	//	"%" (cases+=Case ("| " NEWLINE? cases+=Case)+) "%";
	public AmbivalenceElements getAmbivalenceAccess() {
		return (pAmbivalence != null) ? pAmbivalence : (pAmbivalence = new AmbivalenceElements());
	}
	
	public ParserRule getAmbivalenceRule() {
		return getAmbivalenceAccess().getRule();
	}

	//Case:
	//	name=CASESTRING NEWLINE? (items+=SentenceItemNoAmbivalence (" " NEWLINE? items+=SentenceItemNoAmbivalence)*);
	public CaseElements getCaseAccess() {
		return (pCase != null) ? pCase : (pCase = new CaseElements());
	}
	
	public ParserRule getCaseRule() {
		return getCaseAccess().getRule();
	}

	//terminal CASESTRING:
	//	"case " !":"+ ": ";
	public TerminalRule getCASESTRINGRule() {
		return (tCASESTRING != null) ? tCASESTRING : (tCASESTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "CASESTRING"));
	} 

	//SentenceItemNoAmbivalence:
	//	Word | AbstractMarker;
	public SentenceItemNoAmbivalenceElements getSentenceItemNoAmbivalenceAccess() {
		return (pSentenceItemNoAmbivalence != null) ? pSentenceItemNoAmbivalence : (pSentenceItemNoAmbivalence = new SentenceItemNoAmbivalenceElements());
	}
	
	public ParserRule getSentenceItemNoAmbivalenceRule() {
		return getSentenceItemNoAmbivalenceAccess().getRule();
	}

	//VersMarker:
	//	VersbreakMarker | VersFrontierMarker | BrokenVersbreakMarker | MissingVersMarker | DestroyedVersMarker |
	//	DeletedVersMarker | DisputableVersMarker | RestorationOverRasurMarker | AncientExpandedMarker | RasurMarker;
	public VersMarkerElements getVersMarkerAccess() {
		return (pVersMarker != null) ? pVersMarker : (pVersMarker = new VersMarkerElements());
	}
	
	public ParserRule getVersMarkerRule() {
		return getVersMarkerAccess().getRule();
	}

	//DisputableVersMarker:
	//	{DisputableVersMarker} //'@v'
	//	"⸮󰂀?";
	public DisputableVersMarkerElements getDisputableVersMarkerAccess() {
		return (pDisputableVersMarker != null) ? pDisputableVersMarker : (pDisputableVersMarker = new DisputableVersMarkerElements());
	}
	
	public ParserRule getDisputableVersMarkerRule() {
		return getDisputableVersMarkerAccess().getRule();
	}

	//DeletedVersMarker:
	//	{DeletedVersMarker} //'@v'
	//	"{󰂀}";
	public DeletedVersMarkerElements getDeletedVersMarkerAccess() {
		return (pDeletedVersMarker != null) ? pDeletedVersMarker : (pDeletedVersMarker = new DeletedVersMarkerElements());
	}
	
	public ParserRule getDeletedVersMarkerRule() {
		return getDeletedVersMarkerAccess().getRule();
	}

	//DestroyedVersMarker:
	//	{DestroyedVersMarker} //'@v'
	//	"[󰂀]";
	public DestroyedVersMarkerElements getDestroyedVersMarkerAccess() {
		return (pDestroyedVersMarker != null) ? pDestroyedVersMarker : (pDestroyedVersMarker = new DestroyedVersMarkerElements());
	}
	
	public ParserRule getDestroyedVersMarkerRule() {
		return getDestroyedVersMarkerAccess().getRule();
	}

	//MissingVersMarker:
	//	{MissingVersMarker} //'@v'
	//	"〈󰂀〉";
	public MissingVersMarkerElements getMissingVersMarkerAccess() {
		return (pMissingVersMarker != null) ? pMissingVersMarker : (pMissingVersMarker = new MissingVersMarkerElements());
	}
	
	public ParserRule getMissingVersMarkerRule() {
		return getMissingVersMarkerAccess().getRule();
	}

	//RestorationOverRasurMarker:
	//	{RestorationOverRasurMarker} //'@v'
	//	"[[󰂀]]";
	public RestorationOverRasurMarkerElements getRestorationOverRasurMarkerAccess() {
		return (pRestorationOverRasurMarker != null) ? pRestorationOverRasurMarker : (pRestorationOverRasurMarker = new RestorationOverRasurMarkerElements());
	}
	
	public ParserRule getRestorationOverRasurMarkerRule() {
		return getRestorationOverRasurMarkerAccess().getRule();
	}

	//AncientExpandedMarker:
	//	{AncientExpandedMarker} //'@v'
	//	"((󰂀))";
	public AncientExpandedMarkerElements getAncientExpandedMarkerAccess() {
		return (pAncientExpandedMarker != null) ? pAncientExpandedMarker : (pAncientExpandedMarker = new AncientExpandedMarkerElements());
	}
	
	public ParserRule getAncientExpandedMarkerRule() {
		return getAncientExpandedMarkerAccess().getRule();
	}

	//RasurMarker:
	//	{AncientExpandedMarker} //'@v'
	//	"{{󰂀}}";
	public RasurMarkerElements getRasurMarkerAccess() {
		return (pRasurMarker != null) ? pRasurMarker : (pRasurMarker = new RasurMarkerElements());
	}
	
	public ParserRule getRasurMarkerRule() {
		return getRasurMarkerAccess().getRule();
	}

	//VersFrontierMarker:
	//	{VersFrontierMarker} //	'\uF0081'
	//	//'@mv'
	//	"󰂁";
	public VersFrontierMarkerElements getVersFrontierMarkerAccess() {
		return (pVersFrontierMarker != null) ? pVersFrontierMarker : (pVersFrontierMarker = new VersFrontierMarkerElements());
	}
	
	public ParserRule getVersFrontierMarkerRule() {
		return getVersFrontierMarkerAccess().getRule();
	}

	//VersbreakMarker:
	//	{VersbreakMarker} //	'\uF0080'
	//	//'@v'
	//	"󰂀";
	public VersbreakMarkerElements getVersbreakMarkerAccess() {
		return (pVersbreakMarker != null) ? pVersbreakMarker : (pVersbreakMarker = new VersbreakMarkerElements());
	}
	
	public ParserRule getVersbreakMarkerRule() {
		return getVersbreakMarkerAccess().getRule();
	}

	//BrokenVersbreakMarker:
	//	{BrokenVersbreakMarker} //'@v'
	//	"󰂂";
	public BrokenVersbreakMarkerElements getBrokenVersbreakMarkerAccess() {
		return (pBrokenVersbreakMarker != null) ? pBrokenVersbreakMarker : (pBrokenVersbreakMarker = new BrokenVersbreakMarkerElements());
	}
	
	public ParserRule getBrokenVersbreakMarkerRule() {
		return getBrokenVersbreakMarkerAccess().getRule();
	}

	//Marker:
	//	type=BETWEEN_HASHES;
	public MarkerElements getMarkerAccess() {
		return (pMarker != null) ? pMarker : (pMarker = new MarkerElements());
	}
	
	public ParserRule getMarkerRule() {
		return getMarkerAccess().getRule();
	}

	//terminal BETWEEN_HASHES:
	//	"#" !"#"+ "#";
	public TerminalRule getBETWEEN_HASHESRule() {
		return (tBETWEEN_HASHES != null) ? tBETWEEN_HASHES : (tBETWEEN_HASHES = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "BETWEEN_HASHES"));
	} 

	//DestructionMarker:
	//	type=BETWEEN_MINUS;
	public DestructionMarkerElements getDestructionMarkerAccess() {
		return (pDestructionMarker != null) ? pDestructionMarker : (pDestructionMarker = new DestructionMarkerElements());
	}
	
	public ParserRule getDestructionMarkerRule() {
		return getDestructionMarkerAccess().getRule();
	}

	//terminal BETWEEN_MINUS:
	//	"--" !"-"+ "--";
	public TerminalRule getBETWEEN_MINUSRule() {
		return (tBETWEEN_MINUS != null) ? tBETWEEN_MINUS : (tBETWEEN_MINUS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "BETWEEN_MINUS"));
	} 

	//// word
	//Word:
	//	{Word} wChar+=WordPart+ //('-') (wChar+=WordPart)*
	//;
	public WordElements getWordAccess() {
		return (pWord != null) ? pWord : (pWord = new WordElements());
	}
	
	public ParserRule getWordRule() {
		return getWordAccess().getRule();
	}

	//WordPart:
	//	"="? wChar=WordMiddle // (wChar+=WordMiddle)*(wChar+=WordEnding)? (wChar+=WordEnding)?)	
	//;
	public WordPartElements getWordPartAccess() {
		return (pWordPart != null) ? pWordPart : (pWordPart = new WordPartElements());
	}
	
	public ParserRule getWordPartRule() {
		return getWordPartAccess().getRule();
	}

	//WordMiddle: //	{WordMiddle}
	//	Brackets | Chars | Interfix;
	public WordMiddleElements getWordMiddleAccess() {
		return (pWordMiddle != null) ? pWordMiddle : (pWordMiddle = new WordMiddleElements());
	}
	
	public ParserRule getWordMiddleRule() {
		return getWordMiddleAccess().getRule();
	}

	//// Chars...
	//Chars:
	//	name=EGYSTRING;
	public CharsElements getCharsAccess() {
		return (pChars != null) ? pChars : (pChars = new CharsElements());
	}
	
	public ParserRule getCharsRule() {
		return getCharsAccess().getRule();
	}

	//terminal EGYSTRING: // AlephU
	//	("Ꜣ" //&aleph;=
	//	//|'\u02BE'   // SpiLenU
	//	// |'\u0069\u032F'//iArcU
	//	// coptic
	//	//	//oval
	//	//	| '\uD80C\uDE86' |'\uD80C\uDE87'
	//	//	
	//	//	//cartouche
	//	//	|'\uD80C\uDF79' |'\uD80C\uDF7A'
	//	//	|'\u13379'   // cartOn
	//	//	|'\u1337A'   // cartOff
	//	//	//serech
	//	//	|'\uD80C\uDE58' | '\uD80C\uDE82'
	//	//interfix :
	//	//	|':'|'='|'\u2261'|','|'.'|'~'|'\u22ee'
	//	//num
	//	// special
	//	| "ꜣ" | // spiLen
	//	"ʾ" | // ajin
	//	"ꜥ" | // AjinU
	//	"Ꜥ" | "j" | "y" | "w" | "b" | "f" | "m" | "n" | "r" | "h" | "ḥ" | "ḫ" | "ẖ" | "H" | "Ḥ" | "Ḫ" | "H̱" | "H̭" | "z" | "s"
	//	| "š" | "ś" | "S" | "Š" | "Ś" | "q" | "k" | "g" | "t" | "ṯ" | "ṭ" | "ṱ" | "T" | "Ṯ" | "Ṭ" | "Ṱ" | "d" | "ḏ" | "Ḏ" |
	//	"h̭" | "i" | "i̯" | "ı͗" | "ı̯͗" | "ï" | "i̭" | "I͗" | "I" | //IArcU
	//	"I̯" | "i̯̯" | // ITremaU
	//	"Ï" | "ḳ" | "Ḳ" | "u" | "u̯" | "U" | "U̯" | "e" | "/" | "+" | "č" | "č̣" | "Č" | "Č̣" | "a" | "J" | "Y" | "W" | "B" |
	//	"P" | "F" | "M" | "N" | "R" | "L" | "Z" | "Q" | "K" | "G" | "D" | "A" | "Ⲁ".."⳿" | "p" | "l" | "=" | "_" | // trplColon	
	//	"⁝" | "0".."9" | "Õ" | "ã" | "Þ" | "!" | // OElig
	//	"Œ" | // oelig
	//	"œ" | // Yuml
	//	"Ÿ" | "Æ")+;
	public TerminalRule getEGYSTRINGRule() {
		return (tEGYSTRING != null) ? tEGYSTRING : (tEGYSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "EGYSTRING"));
	} 

	//// textual criticism brackets
	//Brackets:
	//	Rasur | AncientExpanded | RestorationOverRasur | ExpandedColumn | Expanded | DisputableReading | Emendation | Lacuna
	//	| Deletion | PartialDestruction | Cartouche | Oval | Serech;
	public BracketsElements getBracketsAccess() {
		return (pBrackets != null) ? pBrackets : (pBrackets = new BracketsElements());
	}
	
	public ParserRule getBracketsRule() {
		return getBracketsAccess().getRule();
	}

	////Cartouche2:
	////	'\u13379'   wChar+=NoCartouche+ '\u1337A'
	////;
	////Oval
	//Oval:
	//	"𓉘" wChar+=NoCartouche+ "𓊂";
	public OvalElements getOvalAccess() {
		return (pOval != null) ? pOval : (pOval = new OvalElements());
	}
	
	public ParserRule getOvalRule() {
		return getOvalAccess().getRule();
	}

	//// eigentlich Serech
	//Serech:
	//	"𓍹" wChar+=NoCartouche+ "𓍺";
	public SerechElements getSerechAccess() {
		return (pSerech != null) ? pSerech : (pSerech = new SerechElements());
	}
	
	public ParserRule getSerechRule() {
		return getSerechAccess().getRule();
	}

	//Cartouche:
	//	{Expanded} "𓊆" wChar+=NoCartouche+ "𓊇";
	public CartoucheElements getCartoucheAccess() {
		return (pCartouche != null) ? pCartouche : (pCartouche = new CartoucheElements());
	}
	
	public ParserRule getCartoucheRule() {
		return getCartoucheAccess().getRule();
	}

	//NoCartouche:
	//	Chars | Rasur | AncientExpanded | RestorationOverRasur | ExpandedColumn | Expanded | DisputableReading | Emendation |
	//	Lacuna | Deletion | PartialDestruction | Interfix;
	public NoCartoucheElements getNoCartoucheAccess() {
		return (pNoCartouche != null) ? pNoCartouche : (pNoCartouche = new NoCartoucheElements());
	}
	
	public ParserRule getNoCartoucheRule() {
		return getNoCartoucheAccess().getRule();
	}

	//Expanded:
	//	{Expanded} "(" wChar+=NoExpanded+ ")";
	public ExpandedElements getExpandedAccess() {
		return (pExpanded != null) ? pExpanded : (pExpanded = new ExpandedElements());
	}
	
	public ParserRule getExpandedRule() {
		return getExpandedAccess().getRule();
	}

	//NoExpanded:
	//	Chars | Interfix | DisputableReading;
	public NoExpandedElements getNoExpandedAccess() {
		return (pNoExpanded != null) ? pNoExpanded : (pNoExpanded = new NoExpandedElements());
	}
	
	public ParserRule getNoExpandedRule() {
		return getNoExpandedAccess().getRule();
	}

	//Emendation:
	//	{Emendation} "〈" wChar+=NoEmendation+ "〉";
	public EmendationElements getEmendationAccess() {
		return (pEmendation != null) ? pEmendation : (pEmendation = new EmendationElements());
	}
	
	public ParserRule getEmendationRule() {
		return getEmendationAccess().getRule();
	}

	//NoEmendation:
	//	Chars | Expanded | Interfix | DisputableReading;
	public NoEmendationElements getNoEmendationAccess() {
		return (pNoEmendation != null) ? pNoEmendation : (pNoEmendation = new NoEmendationElements());
	}
	
	public ParserRule getNoEmendationRule() {
		return getNoEmendationAccess().getRule();
	}

	//DisputableReading:
	//	{DisputableReading} "⸮" wChar+=NoDisputableReading+ "?";
	public DisputableReadingElements getDisputableReadingAccess() {
		return (pDisputableReading != null) ? pDisputableReading : (pDisputableReading = new DisputableReadingElements());
	}
	
	public ParserRule getDisputableReadingRule() {
		return getDisputableReadingAccess().getRule();
	}

	//NoDisputableReading:
	//	Expanded | Emendation | Deletion | Rasur | AncientExpanded | RestorationOverRasur | ExpandedColumn | Lacuna |
	//	PartialDestruction | Chars | Interfix;
	public NoDisputableReadingElements getNoDisputableReadingAccess() {
		return (pNoDisputableReading != null) ? pNoDisputableReading : (pNoDisputableReading = new NoDisputableReadingElements());
	}
	
	public ParserRule getNoDisputableReadingRule() {
		return getNoDisputableReadingAccess().getRule();
	}

	//Lacuna:
	//	{Lacuna} "[" wChar+=NoLacuna+ "]";
	public LacunaElements getLacunaAccess() {
		return (pLacuna != null) ? pLacuna : (pLacuna = new LacunaElements());
	}
	
	public ParserRule getLacunaRule() {
		return getLacunaAccess().getRule();
	}

	//NoLacuna:
	//	Expanded | Chars | Interfix | DisputableReading | Cartouche | Oval | Serech;
	public NoLacunaElements getNoLacunaAccess() {
		return (pNoLacuna != null) ? pNoLacuna : (pNoLacuna = new NoLacunaElements());
	}
	
	public ParserRule getNoLacunaRule() {
		return getNoLacunaAccess().getRule();
	}

	//Deletion:
	//	{Deletion} "{" wChar+=NoDeletion+ "}";
	public DeletionElements getDeletionAccess() {
		return (pDeletion != null) ? pDeletion : (pDeletion = new DeletionElements());
	}
	
	public ParserRule getDeletionRule() {
		return getDeletionAccess().getRule();
	}

	//NoDeletion:
	//	Chars | PartialDestruction | Expanded | Interfix | DisputableReading | Lacuna | RestorationOverRasur |
	//	AncientExpanded;
	public NoDeletionElements getNoDeletionAccess() {
		return (pNoDeletion != null) ? pNoDeletion : (pNoDeletion = new NoDeletionElements());
	}
	
	public ParserRule getNoDeletionRule() {
		return getNoDeletionAccess().getRule();
	}

	//ExpandedColumn:
	//	{ExpandedColumn} "〈〈" wChar+=NoExpandedColumn+ "〉〉";
	public ExpandedColumnElements getExpandedColumnAccess() {
		return (pExpandedColumn != null) ? pExpandedColumn : (pExpandedColumn = new ExpandedColumnElements());
	}
	
	public ParserRule getExpandedColumnRule() {
		return getExpandedColumnAccess().getRule();
	}

	//NoExpandedColumn:
	//	Chars | Expanded | Interfix | DisputableReading;
	public NoExpandedColumnElements getNoExpandedColumnAccess() {
		return (pNoExpandedColumn != null) ? pNoExpandedColumn : (pNoExpandedColumn = new NoExpandedColumnElements());
	}
	
	public ParserRule getNoExpandedColumnRule() {
		return getNoExpandedColumnAccess().getRule();
	}

	//Rasur:
	//	{Rasur} "{{" wChar+=NoRasur+ "}}";
	public RasurElements getRasurAccess() {
		return (pRasur != null) ? pRasur : (pRasur = new RasurElements());
	}
	
	public ParserRule getRasurRule() {
		return getRasurAccess().getRule();
	}

	//NoRasur:
	//	Chars | Expanded | Interfix | DisputableReading;
	public NoRasurElements getNoRasurAccess() {
		return (pNoRasur != null) ? pNoRasur : (pNoRasur = new NoRasurElements());
	}
	
	public ParserRule getNoRasurRule() {
		return getNoRasurAccess().getRule();
	}

	//AncientExpanded:
	//	{AncientExpanded} "((" wChar+=NoAncientExpanded+ "))";
	public AncientExpandedElements getAncientExpandedAccess() {
		return (pAncientExpanded != null) ? pAncientExpanded : (pAncientExpanded = new AncientExpandedElements());
	}
	
	public ParserRule getAncientExpandedRule() {
		return getAncientExpandedAccess().getRule();
	}

	//NoAncientExpanded:
	//	Chars | Expanded | Interfix | DisputableReading;
	public NoAncientExpandedElements getNoAncientExpandedAccess() {
		return (pNoAncientExpanded != null) ? pNoAncientExpanded : (pNoAncientExpanded = new NoAncientExpandedElements());
	}
	
	public ParserRule getNoAncientExpandedRule() {
		return getNoAncientExpandedAccess().getRule();
	}

	//RestorationOverRasur:
	//	{RestorationOverRasur} "[[" wChar+=NoRestorationOverRasur+ "]]";
	public RestorationOverRasurElements getRestorationOverRasurAccess() {
		return (pRestorationOverRasur != null) ? pRestorationOverRasur : (pRestorationOverRasur = new RestorationOverRasurElements());
	}
	
	public ParserRule getRestorationOverRasurRule() {
		return getRestorationOverRasurAccess().getRule();
	}

	//NoRestorationOverRasur:
	//	Chars | Expanded | Interfix | DisputableReading | Cartouche;
	public NoRestorationOverRasurElements getNoRestorationOverRasurAccess() {
		return (pNoRestorationOverRasur != null) ? pNoRestorationOverRasur : (pNoRestorationOverRasur = new NoRestorationOverRasurElements());
	}
	
	public ParserRule getNoRestorationOverRasurRule() {
		return getNoRestorationOverRasurAccess().getRule();
	}

	//PartialDestruction:
	//	{PartialDestruction} "⸢" wChar+=NoPartialDestruction+ "⸣";
	public PartialDestructionElements getPartialDestructionAccess() {
		return (pPartialDestruction != null) ? pPartialDestruction : (pPartialDestruction = new PartialDestructionElements());
	}
	
	public ParserRule getPartialDestructionRule() {
		return getPartialDestructionAccess().getRule();
	}

	//NoPartialDestruction:
	//	Chars | Deletion | Expanded | DisputableReading | Interfix | Cartouche | Oval | Serech;
	public NoPartialDestructionElements getNoPartialDestructionAccess() {
		return (pNoPartialDestruction != null) ? pNoPartialDestruction : (pNoPartialDestruction = new NoPartialDestructionElements());
	}
	
	public ParserRule getNoPartialDestructionRule() {
		return getNoPartialDestructionAccess().getRule();
	}

	//// textual criticism interfixes
	//Interfix:
	//	InterfixFlexion | InterfixLexical | InterfixSuffixPronomLexical | InterfixPrefixNonLexical | InterfixPrefixLexical |
	//	InterfixConnectionSyllabicGroup | InterfixCompoundWords | InterfixPhoneticalComplement;
	public InterfixElements getInterfixAccess() {
		return (pInterfix != null) ? pInterfix : (pInterfix = new InterfixElements());
	}
	
	public ParserRule getInterfixRule() {
		return getInterfixAccess().getRule();
	}

	//InterfixLexical:
	//	{InterfixLexical} ",";
	public InterfixLexicalElements getInterfixLexicalAccess() {
		return (pInterfixLexical != null) ? pInterfixLexical : (pInterfixLexical = new InterfixLexicalElements());
	}
	
	public ParserRule getInterfixLexicalRule() {
		return getInterfixLexicalAccess().getRule();
	}

	//InterfixFlexion:
	//	{InterfixFlexion} ".";
	public InterfixFlexionElements getInterfixFlexionAccess() {
		return (pInterfixFlexion != null) ? pInterfixFlexion : (pInterfixFlexion = new InterfixFlexionElements());
	}
	
	public ParserRule getInterfixFlexionRule() {
		return getInterfixFlexionAccess().getRule();
	}

	//InterfixSuffixPronomLexical:
	//	{InterfixSuffixPronomLexical} "≡";
	public InterfixSuffixPronomLexicalElements getInterfixSuffixPronomLexicalAccess() {
		return (pInterfixSuffixPronomLexical != null) ? pInterfixSuffixPronomLexical : (pInterfixSuffixPronomLexical = new InterfixSuffixPronomLexicalElements());
	}
	
	public ParserRule getInterfixSuffixPronomLexicalRule() {
		return getInterfixSuffixPronomLexicalAccess().getRule();
	}

	//InterfixPrefixNonLexical:
	//	{InterfixPrefixNonLexical} ":";
	public InterfixPrefixNonLexicalElements getInterfixPrefixNonLexicalAccess() {
		return (pInterfixPrefixNonLexical != null) ? pInterfixPrefixNonLexical : (pInterfixPrefixNonLexical = new InterfixPrefixNonLexicalElements());
	}
	
	public ParserRule getInterfixPrefixNonLexicalRule() {
		return getInterfixPrefixNonLexicalAccess().getRule();
	}

	//InterfixPrefixLexical:
	//	{InterfixPrefixLexical} "⋮";
	public InterfixPrefixLexicalElements getInterfixPrefixLexicalAccess() {
		return (pInterfixPrefixLexical != null) ? pInterfixPrefixLexical : (pInterfixPrefixLexical = new InterfixPrefixLexicalElements());
	}
	
	public ParserRule getInterfixPrefixLexicalRule() {
		return getInterfixPrefixLexicalAccess().getRule();
	}

	//InterfixConnectionSyllabicGroup:
	//	{InterfixConnectionSyllabicGroup} "~";
	public InterfixConnectionSyllabicGroupElements getInterfixConnectionSyllabicGroupAccess() {
		return (pInterfixConnectionSyllabicGroup != null) ? pInterfixConnectionSyllabicGroup : (pInterfixConnectionSyllabicGroup = new InterfixConnectionSyllabicGroupElements());
	}
	
	public ParserRule getInterfixConnectionSyllabicGroupRule() {
		return getInterfixConnectionSyllabicGroupAccess().getRule();
	}

	//InterfixCompoundWords:
	//	{InterfixCompoundWords} "-";
	public InterfixCompoundWordsElements getInterfixCompoundWordsAccess() {
		return (pInterfixCompoundWords != null) ? pInterfixCompoundWords : (pInterfixCompoundWords = new InterfixCompoundWordsElements());
	}
	
	public ParserRule getInterfixCompoundWordsRule() {
		return getInterfixCompoundWordsAccess().getRule();
	}

	//InterfixPhoneticalComplement:
	//	{InterfixPhoneticalComplement} ";";
	public InterfixPhoneticalComplementElements getInterfixPhoneticalComplementAccess() {
		return (pInterfixPhoneticalComplement != null) ? pInterfixPhoneticalComplement : (pInterfixPhoneticalComplement = new InterfixPhoneticalComplementElements());
	}
	
	public ParserRule getInterfixPhoneticalComplementRule() {
		return getInterfixPhoneticalComplementAccess().getRule();
	}
}
