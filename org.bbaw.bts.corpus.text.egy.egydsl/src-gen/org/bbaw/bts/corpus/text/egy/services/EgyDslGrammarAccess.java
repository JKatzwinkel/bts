/*
* generated by Xtext
*/
package org.bbaw.bts.corpus.text.egy.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class EgyDslGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class TextContentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TextContent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTextContentAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cItemsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cItemsTextItemParserRuleCall_1_0_0 = (RuleCall)cItemsAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Alternatives cAlternatives_1_1_0 = (Alternatives)cGroup_1_1.eContents().get(0);
		private final Keyword cSpaceKeyword_1_1_0_0 = (Keyword)cAlternatives_1_1_0.eContents().get(0);
		private final RuleCall cNEWLINETerminalRuleCall_1_1_0_1 = (RuleCall)cAlternatives_1_1_0.eContents().get(1);
		private final Assignment cItemsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cItemsTextItemParserRuleCall_1_1_1_0 = (RuleCall)cItemsAssignment_1_1_1.eContents().get(0);
		
		//TextContent:
		//	{TextContent} (items+=TextItem ((" " | NEWLINE)? items+=TextItem)*);
		public ParserRule getRule() { return rule; }

		//{TextContent} (items+=TextItem ((" " | NEWLINE)? items+=TextItem)*)
		public Group getGroup() { return cGroup; }

		//{TextContent}
		public Action getTextContentAction_0() { return cTextContentAction_0; }

		//items+=TextItem ((" " | NEWLINE)? items+=TextItem)*
		public Group getGroup_1() { return cGroup_1; }

		//items+=TextItem
		public Assignment getItemsAssignment_1_0() { return cItemsAssignment_1_0; }

		//TextItem
		public RuleCall getItemsTextItemParserRuleCall_1_0_0() { return cItemsTextItemParserRuleCall_1_0_0; }

		//((" " | NEWLINE)? items+=TextItem)*
		public Group getGroup_1_1() { return cGroup_1_1; }

		//(" " | NEWLINE)?
		public Alternatives getAlternatives_1_1_0() { return cAlternatives_1_1_0; }

		//" "
		public Keyword getSpaceKeyword_1_1_0_0() { return cSpaceKeyword_1_1_0_0; }

		//NEWLINE
		public RuleCall getNEWLINETerminalRuleCall_1_1_0_1() { return cNEWLINETerminalRuleCall_1_1_0_1; }

		//items+=TextItem
		public Assignment getItemsAssignment_1_1_1() { return cItemsAssignment_1_1_1; }

		//TextItem
		public RuleCall getItemsTextItemParserRuleCall_1_1_1_0() { return cItemsTextItemParserRuleCall_1_1_1_0; }
	}

	public class TextItemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TextItem");
		private final RuleCall cSentenceParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//TextItem:
		//	Sentence;
		public ParserRule getRule() { return rule; }

		//Sentence
		public RuleCall getSentenceParserRuleCall() { return cSentenceParserRuleCall; }
	}

	public class SentenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Sentence");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSectionSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cItemsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cItemsSentenceItemParserRuleCall_1_0_0 = (RuleCall)cItemsAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cSpaceKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final RuleCall cNEWLINETerminalRuleCall_1_1_1 = (RuleCall)cGroup_1_1.eContents().get(1);
		private final Assignment cItemsAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cItemsSentenceItemParserRuleCall_1_1_2_0 = (RuleCall)cItemsAssignment_1_1_2.eContents().get(0);
		private final Keyword cSectionSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//// sentence	
		//Sentence:
		//	"§" (items+=SentenceItem (" " NEWLINE? items+=SentenceItem)*) "§";
		public ParserRule getRule() { return rule; }

		//"§" (items+=SentenceItem (" " NEWLINE? items+=SentenceItem)*) "§"
		public Group getGroup() { return cGroup; }

		//"§"
		public Keyword getSectionSignKeyword_0() { return cSectionSignKeyword_0; }

		//items+=SentenceItem (" " NEWLINE? items+=SentenceItem)*
		public Group getGroup_1() { return cGroup_1; }

		//items+=SentenceItem
		public Assignment getItemsAssignment_1_0() { return cItemsAssignment_1_0; }

		//SentenceItem
		public RuleCall getItemsSentenceItemParserRuleCall_1_0_0() { return cItemsSentenceItemParserRuleCall_1_0_0; }

		//(" " NEWLINE? items+=SentenceItem)*
		public Group getGroup_1_1() { return cGroup_1_1; }

		//" "
		public Keyword getSpaceKeyword_1_1_0() { return cSpaceKeyword_1_1_0; }

		//NEWLINE?
		public RuleCall getNEWLINETerminalRuleCall_1_1_1() { return cNEWLINETerminalRuleCall_1_1_1; }

		//items+=SentenceItem
		public Assignment getItemsAssignment_1_1_2() { return cItemsAssignment_1_1_2; }

		//SentenceItem
		public RuleCall getItemsSentenceItemParserRuleCall_1_1_2_0() { return cItemsSentenceItemParserRuleCall_1_1_2_0; }

		//"§"
		public Keyword getSectionSignKeyword_2() { return cSectionSignKeyword_2; }
	}

	public class SentenceItemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SentenceItem");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cWordParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAbstractMarkerParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAmbivalenceParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//SentenceItem:
		//	Word | AbstractMarker | Ambivalence;
		public ParserRule getRule() { return rule; }

		//Word | AbstractMarker | Ambivalence
		public Alternatives getAlternatives() { return cAlternatives; }

		//Word
		public RuleCall getWordParserRuleCall_0() { return cWordParserRuleCall_0; }

		//AbstractMarker
		public RuleCall getAbstractMarkerParserRuleCall_1() { return cAbstractMarkerParserRuleCall_1; }

		//Ambivalence
		public RuleCall getAmbivalenceParserRuleCall_2() { return cAmbivalenceParserRuleCall_2; }
	}

	public class AbstractMarkerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbstractMarker");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMarkerParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVersMarkerParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AbstractMarker:
		//	Marker | VersMarker;
		public ParserRule getRule() { return rule; }

		//Marker | VersMarker
		public Alternatives getAlternatives() { return cAlternatives; }

		//Marker
		public RuleCall getMarkerParserRuleCall_0() { return cMarkerParserRuleCall_0; }

		//VersMarker
		public RuleCall getVersMarkerParserRuleCall_1() { return cVersMarkerParserRuleCall_1; }
	}

	public class AmbivalenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Ambivalence");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPercentSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cCasesAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cCasesCaseParserRuleCall_1_0_0 = (RuleCall)cCasesAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cSemicolonSpaceKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final RuleCall cNEWLINETerminalRuleCall_1_1_1 = (RuleCall)cGroup_1_1.eContents().get(1);
		private final Assignment cCasesAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cCasesCaseParserRuleCall_1_1_2_0 = (RuleCall)cCasesAssignment_1_1_2.eContents().get(0);
		private final Keyword cPercentSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Ambivalence:
		//	"%" (cases+=Case ("; " NEWLINE? cases+=Case)+) "%";
		public ParserRule getRule() { return rule; }

		//"%" (cases+=Case ("; " NEWLINE? cases+=Case)+) "%"
		public Group getGroup() { return cGroup; }

		//"%"
		public Keyword getPercentSignKeyword_0() { return cPercentSignKeyword_0; }

		//cases+=Case ("; " NEWLINE? cases+=Case)+
		public Group getGroup_1() { return cGroup_1; }

		//cases+=Case
		public Assignment getCasesAssignment_1_0() { return cCasesAssignment_1_0; }

		//Case
		public RuleCall getCasesCaseParserRuleCall_1_0_0() { return cCasesCaseParserRuleCall_1_0_0; }

		//("; " NEWLINE? cases+=Case)+
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"; "
		public Keyword getSemicolonSpaceKeyword_1_1_0() { return cSemicolonSpaceKeyword_1_1_0; }

		//NEWLINE?
		public RuleCall getNEWLINETerminalRuleCall_1_1_1() { return cNEWLINETerminalRuleCall_1_1_1; }

		//cases+=Case
		public Assignment getCasesAssignment_1_1_2() { return cCasesAssignment_1_1_2; }

		//Case
		public RuleCall getCasesCaseParserRuleCall_1_1_2_0() { return cCasesCaseParserRuleCall_1_1_2_0; }

		//"%"
		public Keyword getPercentSignKeyword_2() { return cPercentSignKeyword_2; }
	}

	public class CaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Case");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameCASESTRINGTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final RuleCall cNEWLINETerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cItemsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cItemsSentenceItemNoAmbivalenceParserRuleCall_2_0_0 = (RuleCall)cItemsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cSpaceKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final RuleCall cNEWLINETerminalRuleCall_2_1_1 = (RuleCall)cGroup_2_1.eContents().get(1);
		private final Assignment cItemsAssignment_2_1_2 = (Assignment)cGroup_2_1.eContents().get(2);
		private final RuleCall cItemsSentenceItemNoAmbivalenceParserRuleCall_2_1_2_0 = (RuleCall)cItemsAssignment_2_1_2.eContents().get(0);
		
		//Case:
		//	name=CASESTRING NEWLINE? (items+=SentenceItemNoAmbivalence (" " NEWLINE? items+=SentenceItemNoAmbivalence)*);
		public ParserRule getRule() { return rule; }

		//name=CASESTRING NEWLINE? (items+=SentenceItemNoAmbivalence (" " NEWLINE? items+=SentenceItemNoAmbivalence)*)
		public Group getGroup() { return cGroup; }

		//name=CASESTRING
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//CASESTRING
		public RuleCall getNameCASESTRINGTerminalRuleCall_0_0() { return cNameCASESTRINGTerminalRuleCall_0_0; }

		//NEWLINE?
		public RuleCall getNEWLINETerminalRuleCall_1() { return cNEWLINETerminalRuleCall_1; }

		//items+=SentenceItemNoAmbivalence (" " NEWLINE? items+=SentenceItemNoAmbivalence)*
		public Group getGroup_2() { return cGroup_2; }

		//items+=SentenceItemNoAmbivalence
		public Assignment getItemsAssignment_2_0() { return cItemsAssignment_2_0; }

		//SentenceItemNoAmbivalence
		public RuleCall getItemsSentenceItemNoAmbivalenceParserRuleCall_2_0_0() { return cItemsSentenceItemNoAmbivalenceParserRuleCall_2_0_0; }

		//(" " NEWLINE? items+=SentenceItemNoAmbivalence)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//" "
		public Keyword getSpaceKeyword_2_1_0() { return cSpaceKeyword_2_1_0; }

		//NEWLINE?
		public RuleCall getNEWLINETerminalRuleCall_2_1_1() { return cNEWLINETerminalRuleCall_2_1_1; }

		//items+=SentenceItemNoAmbivalence
		public Assignment getItemsAssignment_2_1_2() { return cItemsAssignment_2_1_2; }

		//SentenceItemNoAmbivalence
		public RuleCall getItemsSentenceItemNoAmbivalenceParserRuleCall_2_1_2_0() { return cItemsSentenceItemNoAmbivalenceParserRuleCall_2_1_2_0; }
	}

	public class SentenceItemNoAmbivalenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SentenceItemNoAmbivalence");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cWordParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAbstractMarkerParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//SentenceItemNoAmbivalence:
		//	Word | AbstractMarker;
		public ParserRule getRule() { return rule; }

		//Word | AbstractMarker
		public Alternatives getAlternatives() { return cAlternatives; }

		//Word
		public RuleCall getWordParserRuleCall_0() { return cWordParserRuleCall_0; }

		//AbstractMarker
		public RuleCall getAbstractMarkerParserRuleCall_1() { return cAbstractMarkerParserRuleCall_1; }
	}

	public class VersMarkerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VersMarker");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVersbreakMarkerParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVersFrontierMarkerParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBrokenVersbreakMarkerParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//VersMarker:
		//	VersbreakMarker | VersFrontierMarker | BrokenVersbreakMarker;
		public ParserRule getRule() { return rule; }

		//VersbreakMarker | VersFrontierMarker | BrokenVersbreakMarker
		public Alternatives getAlternatives() { return cAlternatives; }

		//VersbreakMarker
		public RuleCall getVersbreakMarkerParserRuleCall_0() { return cVersbreakMarkerParserRuleCall_0; }

		//VersFrontierMarker
		public RuleCall getVersFrontierMarkerParserRuleCall_1() { return cVersFrontierMarkerParserRuleCall_1; }

		//BrokenVersbreakMarker
		public RuleCall getBrokenVersbreakMarkerParserRuleCall_2() { return cBrokenVersbreakMarkerParserRuleCall_2; }
	}

	public class VersFrontierMarkerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VersFrontierMarker");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVersFrontierMarkerAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeadSurrogateDb80TrailSurrogateDc81Keyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//VersFrontierMarker:
		//	{VersFrontierMarker} //'@mv'
		//	"󰂁";
		public ParserRule getRule() { return rule; }

		//{VersFrontierMarker} //'@mv'
		//"󰂁"
		public Group getGroup() { return cGroup; }

		//{VersFrontierMarker}
		public Action getVersFrontierMarkerAction_0() { return cVersFrontierMarkerAction_0; }

		////'@mv'
		//"󰂁"
		public Keyword getLeadSurrogateDb80TrailSurrogateDc81Keyword_1() { return cLeadSurrogateDb80TrailSurrogateDc81Keyword_1; }
	}

	public class VersbreakMarkerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VersbreakMarker");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVersbreakMarkerAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeadSurrogateDb80TrailSurrogateDc80Keyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//VersbreakMarker:
		//	{VersbreakMarker} //'@v'
		//	"󰂀";
		public ParserRule getRule() { return rule; }

		//{VersbreakMarker} //'@v'
		//"󰂀"
		public Group getGroup() { return cGroup; }

		//{VersbreakMarker}
		public Action getVersbreakMarkerAction_0() { return cVersbreakMarkerAction_0; }

		////'@v'
		//"󰂀"
		public Keyword getLeadSurrogateDb80TrailSurrogateDc80Keyword_1() { return cLeadSurrogateDb80TrailSurrogateDc80Keyword_1; }
	}

	public class BrokenVersbreakMarkerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BrokenVersbreakMarker");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBrokenVersbreakMarkerAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeadSurrogateDb80TrailSurrogateDc82Keyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//BrokenVersbreakMarker:
		//	{BrokenVersbreakMarker} //'@v'
		//	"󰂂";
		public ParserRule getRule() { return rule; }

		//{BrokenVersbreakMarker} //'@v'
		//"󰂂"
		public Group getGroup() { return cGroup; }

		//{BrokenVersbreakMarker}
		public Action getBrokenVersbreakMarkerAction_0() { return cBrokenVersbreakMarkerAction_0; }

		////'@v'
		//"󰂂"
		public Keyword getLeadSurrogateDb80TrailSurrogateDc82Keyword_1() { return cLeadSurrogateDb80TrailSurrogateDc82Keyword_1; }
	}

	public class MarkerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Marker");
		private final Assignment cTypeAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cTypeBETWEEN_HASHESTerminalRuleCall_0 = (RuleCall)cTypeAssignment.eContents().get(0);
		
		//Marker: //	('#' (type=(DUALSTRING|PLURALSTRING|EGYSTRING|LATINEGYSTRING) (': ' (NEWLINE)? name=(DUALSTRING|PLURALSTRING|EGYSTRING|LATINEGYSTRING))?) '#')
		//	type=BETWEEN_HASHES;
		public ParserRule getRule() { return rule; }

		////	('#' (type=(DUALSTRING|PLURALSTRING|EGYSTRING|LATINEGYSTRING) (': ' (NEWLINE)? name=(DUALSTRING|PLURALSTRING|EGYSTRING|LATINEGYSTRING))?) '#')
		//type=BETWEEN_HASHES
		public Assignment getTypeAssignment() { return cTypeAssignment; }

		//BETWEEN_HASHES
		public RuleCall getTypeBETWEEN_HASHESTerminalRuleCall_0() { return cTypeBETWEEN_HASHESTerminalRuleCall_0; }
	}

	public class WordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Word");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cWordAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cWCharAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cWCharWordPartParserRuleCall_1_0_0 = (RuleCall)cWCharAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cWCharAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cWCharWordPartParserRuleCall_1_1_1_0 = (RuleCall)cWCharAssignment_1_1_1.eContents().get(0);
		
		//// word
		//Word:
		//	{Word} (wChar+=WordPart ("-" wChar+=WordPart)*);
		public ParserRule getRule() { return rule; }

		//{Word} (wChar+=WordPart ("-" wChar+=WordPart)*)
		public Group getGroup() { return cGroup; }

		//{Word}
		public Action getWordAction_0() { return cWordAction_0; }

		//wChar+=WordPart ("-" wChar+=WordPart)*
		public Group getGroup_1() { return cGroup_1; }

		//wChar+=WordPart
		public Assignment getWCharAssignment_1_0() { return cWCharAssignment_1_0; }

		//WordPart
		public RuleCall getWCharWordPartParserRuleCall_1_0_0() { return cWCharWordPartParserRuleCall_1_0_0; }

		//("-" wChar+=WordPart)*
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"-"
		public Keyword getHyphenMinusKeyword_1_1_0() { return cHyphenMinusKeyword_1_1_0; }

		//wChar+=WordPart
		public Assignment getWCharAssignment_1_1_1() { return cWCharAssignment_1_1_1; }

		//WordPart
		public RuleCall getWCharWordPartParserRuleCall_1_1_1_0() { return cWCharWordPartParserRuleCall_1_1_1_0; }
	}

	public class WordPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WordPart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEqualsSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cWCharAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cWCharWordMiddleParserRuleCall_1_0_0 = (RuleCall)cWCharAssignment_1_0.eContents().get(0);
		private final Assignment cWCharAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cWCharWordMiddleParserRuleCall_1_1_0 = (RuleCall)cWCharAssignment_1_1.eContents().get(0);
		private final Assignment cWCharAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cWCharWordEndingParserRuleCall_1_2_0 = (RuleCall)cWCharAssignment_1_2.eContents().get(0);
		private final Assignment cWCharAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cWCharWordEndingParserRuleCall_1_3_0 = (RuleCall)cWCharAssignment_1_3.eContents().get(0);
		
		//WordPart:
		//	"="? (wChar+=WordMiddle wChar+=WordMiddle* wChar+=WordEnding? wChar+=WordEnding?);
		public ParserRule getRule() { return rule; }

		//"="? (wChar+=WordMiddle wChar+=WordMiddle* wChar+=WordEnding? wChar+=WordEnding?)
		public Group getGroup() { return cGroup; }

		//"="?
		public Keyword getEqualsSignKeyword_0() { return cEqualsSignKeyword_0; }

		//wChar+=WordMiddle wChar+=WordMiddle* wChar+=WordEnding? wChar+=WordEnding?
		public Group getGroup_1() { return cGroup_1; }

		//wChar+=WordMiddle
		public Assignment getWCharAssignment_1_0() { return cWCharAssignment_1_0; }

		//WordMiddle
		public RuleCall getWCharWordMiddleParserRuleCall_1_0_0() { return cWCharWordMiddleParserRuleCall_1_0_0; }

		//wChar+=WordMiddle*
		public Assignment getWCharAssignment_1_1() { return cWCharAssignment_1_1; }

		//WordMiddle
		public RuleCall getWCharWordMiddleParserRuleCall_1_1_0() { return cWCharWordMiddleParserRuleCall_1_1_0; }

		//wChar+=WordEnding?
		public Assignment getWCharAssignment_1_2() { return cWCharAssignment_1_2; }

		//WordEnding
		public RuleCall getWCharWordEndingParserRuleCall_1_2_0() { return cWCharWordEndingParserRuleCall_1_2_0; }

		//wChar+=WordEnding?
		public Assignment getWCharAssignment_1_3() { return cWCharAssignment_1_3; }

		//WordEnding
		public RuleCall getWCharWordEndingParserRuleCall_1_3_0() { return cWCharWordEndingParserRuleCall_1_3_0; }
	}

	public class WordEndingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WordEnding");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPluralEndingParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDualEndingParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cEndingParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//WordEnding:
		//	PluralEnding | DualEnding | Ending;
		public ParserRule getRule() { return rule; }

		//PluralEnding | DualEnding | Ending
		public Alternatives getAlternatives() { return cAlternatives; }

		//PluralEnding
		public RuleCall getPluralEndingParserRuleCall_0() { return cPluralEndingParserRuleCall_0; }

		//DualEnding
		public RuleCall getDualEndingParserRuleCall_1() { return cDualEndingParserRuleCall_1; }

		//Ending
		public RuleCall getEndingParserRuleCall_2() { return cEndingParserRuleCall_2; }
	}

	public class EndingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Ending");
		private final Assignment cCharsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cCharsSuffixCharsParserRuleCall_0 = (RuleCall)cCharsAssignment.eContents().get(0);
		
		//Ending:
		//	chars=SuffixChars;
		public ParserRule getRule() { return rule; }

		//chars=SuffixChars
		public Assignment getCharsAssignment() { return cCharsAssignment; }

		//SuffixChars
		public RuleCall getCharsSuffixCharsParserRuleCall_0() { return cCharsSuffixCharsParserRuleCall_0; }
	}

	public class DualEndingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DualEnding");
		private final Assignment cCharsAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cCharsAlternatives_0 = (Alternatives)cCharsAssignment.eContents().get(0);
		private final RuleCall cCharsDUALSTRING_COMMATerminalRuleCall_0_0 = (RuleCall)cCharsAlternatives_0.eContents().get(0);
		private final RuleCall cCharsDUALSTRING_DOTTerminalRuleCall_0_1 = (RuleCall)cCharsAlternatives_0.eContents().get(1);
		
		//DualEnding: //	{DualEnding}
		// chars=(DUALSTRING_COMMA | DUALSTRING_DOT);
		public ParserRule getRule() { return rule; }

		////	{DualEnding}
		// chars=(DUALSTRING_COMMA | DUALSTRING_DOT)
		public Assignment getCharsAssignment() { return cCharsAssignment; }

		//DUALSTRING_COMMA | DUALSTRING_DOT
		public Alternatives getCharsAlternatives_0() { return cCharsAlternatives_0; }

		//DUALSTRING_COMMA
		public RuleCall getCharsDUALSTRING_COMMATerminalRuleCall_0_0() { return cCharsDUALSTRING_COMMATerminalRuleCall_0_0; }

		//DUALSTRING_DOT
		public RuleCall getCharsDUALSTRING_DOTTerminalRuleCall_0_1() { return cCharsDUALSTRING_DOTTerminalRuleCall_0_1; }
	}

	public class PluralEndingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PluralEnding");
		private final Assignment cCharsAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cCharsAlternatives_0 = (Alternatives)cCharsAssignment.eContents().get(0);
		private final RuleCall cCharsPLURALSTRING_COMMATerminalRuleCall_0_0 = (RuleCall)cCharsAlternatives_0.eContents().get(0);
		private final RuleCall cCharsPLURALSTRING_DOTTerminalRuleCall_0_1 = (RuleCall)cCharsAlternatives_0.eContents().get(1);
		
		//PluralEnding: //	{PluralEnding}
		// chars=(PLURALSTRING_COMMA | PLURALSTRING_DOT);
		public ParserRule getRule() { return rule; }

		////	{PluralEnding}
		// chars=(PLURALSTRING_COMMA | PLURALSTRING_DOT)
		public Assignment getCharsAssignment() { return cCharsAssignment; }

		//PLURALSTRING_COMMA | PLURALSTRING_DOT
		public Alternatives getCharsAlternatives_0() { return cCharsAlternatives_0; }

		//PLURALSTRING_COMMA
		public RuleCall getCharsPLURALSTRING_COMMATerminalRuleCall_0_0() { return cCharsPLURALSTRING_COMMATerminalRuleCall_0_0; }

		//PLURALSTRING_DOT
		public RuleCall getCharsPLURALSTRING_DOTTerminalRuleCall_0_1() { return cCharsPLURALSTRING_DOTTerminalRuleCall_0_1; }
	}

	public class InterfixFlexionEdingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InterfixFlexionEding");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cInterfixAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cInterfixInterfixFlexionParserRuleCall_0_0 = (RuleCall)cInterfixAssignment_0.eContents().get(0);
		private final Assignment cCharsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCharsSuffixCharsParserRuleCall_1_0 = (RuleCall)cCharsAssignment_1.eContents().get(0);
		
		//InterfixFlexionEding:
		//	interfix=InterfixFlexion chars=SuffixChars;
		public ParserRule getRule() { return rule; }

		//interfix=InterfixFlexion chars=SuffixChars
		public Group getGroup() { return cGroup; }

		//interfix=InterfixFlexion
		public Assignment getInterfixAssignment_0() { return cInterfixAssignment_0; }

		//InterfixFlexion
		public RuleCall getInterfixInterfixFlexionParserRuleCall_0_0() { return cInterfixInterfixFlexionParserRuleCall_0_0; }

		//chars=SuffixChars
		public Assignment getCharsAssignment_1() { return cCharsAssignment_1; }

		//SuffixChars
		public RuleCall getCharsSuffixCharsParserRuleCall_1_0() { return cCharsSuffixCharsParserRuleCall_1_0; }
	}

	public class InterfixLexicalEndingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InterfixLexicalEnding");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cInterfixAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cInterfixInterfixLexicalParserRuleCall_0_0 = (RuleCall)cInterfixAssignment_0.eContents().get(0);
		private final Assignment cCharsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCharsSuffixCharsParserRuleCall_1_0 = (RuleCall)cCharsAssignment_1.eContents().get(0);
		
		//InterfixLexicalEnding:
		//	interfix=InterfixLexical chars=SuffixChars;
		public ParserRule getRule() { return rule; }

		//interfix=InterfixLexical chars=SuffixChars
		public Group getGroup() { return cGroup; }

		//interfix=InterfixLexical
		public Assignment getInterfixAssignment_0() { return cInterfixAssignment_0; }

		//InterfixLexical
		public RuleCall getInterfixInterfixLexicalParserRuleCall_0_0() { return cInterfixInterfixLexicalParserRuleCall_0_0; }

		//chars=SuffixChars
		public Assignment getCharsAssignment_1() { return cCharsAssignment_1; }

		//SuffixChars
		public RuleCall getCharsSuffixCharsParserRuleCall_1_0() { return cCharsSuffixCharsParserRuleCall_1_0; }
	}

	public class WordMiddleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WordMiddle");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBracketsParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCharsParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//WordMiddle: //	{WordMiddle}
		//	Brackets | Chars;
		public ParserRule getRule() { return rule; }

		////	{WordMiddle}
		//Brackets | Chars
		public Alternatives getAlternatives() { return cAlternatives; }

		////	{WordMiddle}
		//Brackets
		public RuleCall getBracketsParserRuleCall_0() { return cBracketsParserRuleCall_0; }

		//Chars
		public RuleCall getCharsParserRuleCall_1() { return cCharsParserRuleCall_1; }
	}

	public class CharsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Chars");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameEGYSTRINGTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//// Chars...
		//Chars:
		//	name=EGYSTRING;
		public ParserRule getRule() { return rule; }

		//name=EGYSTRING
		public Assignment getNameAssignment() { return cNameAssignment; }

		//EGYSTRING
		public RuleCall getNameEGYSTRINGTerminalRuleCall_0() { return cNameEGYSTRINGTerminalRuleCall_0; }
	}

	public class SuffixCharsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SuffixChars");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameSUFFIXSTRINGTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//// Chars...
		//SuffixChars:
		//	name=SUFFIXSTRING;
		public ParserRule getRule() { return rule; }

		//name=SUFFIXSTRING
		public Assignment getNameAssignment() { return cNameAssignment; }

		//SUFFIXSTRING
		public RuleCall getNameSUFFIXSTRINGTerminalRuleCall_0() { return cNameSUFFIXSTRINGTerminalRuleCall_0; }
	}

	public class InterfixElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Interfix");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInterfixSuffixPronomLexicalParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cInterfixPrefixNonLexicalParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cInterfixPrefixLexicalParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cInterfixConnectionSyllabicGroupParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		////terminal LATINEGYSTRING:
		////	(
		////	//'\uA722'|'Ꜥ'|'ḥ'|'ḫ'|'ẖ'|'š'|'ṯ'|'ḏ'|'ʾ'|'ı͗'|'ś'|'ḳ'|'ı̯͗'|'ï'|'u̯'|'č'|'č̣'|'ṭ'|'h̭'|'ṱ'|'i̭'|'ꜣ'|'ꜥ'|'Ḥ'|'Ḫ'|'H̱'|'Š'|'Ṯ'|'Ḏ'|'I͗'|'Ś'|'Ḳ'|'Č'|'Č̣'|'Ṭ'|'H̭'|'Ṱ'
		////	
		////	//latin
		////	'a'|'c'|'z'|'A'|'Z'|'0'..'9'|'ä'|'ö'|'ü'|'ß'|'Ä'|'Ö'|'Ü' | EGYSTRING 
		////// coptic
		//////	|  'Ⲁ''|''ⲁ''|''Ⲃ'|'ⲃ'|'Ⲅ'|'ⲅ'|'Ⲇ'|'ⲇ'|'Ⲉ'|'ⲉ'|'Ⲋ'|'ⲋ'|'Ⲍ'|'ⲍ'|'Ⲏ'|'ⲏ'|'Ⲑ'|'ⲑ'|'Ⲓ'|'ⲓ'|'Ⲕ'|'ⲕ'|'Ⲗ'|'ⲗ'|'Ⲙ'|'ⲙ'|'Ⲛ'|'ⲛ'|'Ⲝ'|'ⲝ'|'Ⲟ'|'ⲟ'|'Ⲡ'|'ⲡ'|'Ⲣ'|'ⲣ'|'Ⲥ'|'ⲥ'|'Ⲧ'|'ⲧ'|'Ⲩ'|'ⲩ'|'Ⲫ'|'ⲫ'|'Ⲭ'|'ⲭ'|'Ⲯ'|'ⲯ'|'Ⲱ'|'ⲱ'|'Ⲳ'|'ⲳ'|'Ⲵ'|'ⲵ'|'Ⲷ'|'ⲷ'|'Ⲹ'|'ⲹ'|'Ⲻ'|'ⲻ'|'Ⲽ'|'ⲽ'|'Ⲿ'|'ⲿ'|'Ⳁ'|'ⳁ'|'Ⳃ'|'ⳃ'|'Ⳅ'|'ⳅ'|'Ⳇ'|'ⳇ'|'Ⳉ'|'ⳉ'|'Ⳋ'|'ⳋ'|'Ⳍ'|'ⳍ'|'Ⳏ'|'ⳏ'|'Ⳑ'|'ⳑ'|'Ⳓ'|'ⳓ'|'Ⳕ'|'ⳕ'|'Ⳗ'|'ⳗ'|'Ⳙ'|'ⳙ'|'Ⳛ'|'ⳛ'|'Ⳝ'|'ⳝ'|'Ⳟ'|'ⳟ'|'Ⳡ'|'ⳡ'|'Ⳣ'|'ⳣ'|'ⳤ'|'⳥'|'⳦'|'⳧'|'⳨'|'⳩'|'⳪'|'Ⳬ'|'ⳬ'|'Ⳮ'|'ⳮ'|'⳯'|'⳰'|'⳱'|'Ⳳ'|'ⳳ'|'⳴'|'⳵'|'⳶'|'⳷'|'⳸'|'⳹'|'⳺'|'⳻'|'⳼'|'⳽'|'⳾'|'⳿'|'Ϡ'|'ϡ'|'Ϣ'|'ϣ'|'Ϥ'|'ϥ'|'Ϧ'|'ϧ'|'Ϩ'|'ϩ'|'Ϫ'|'ϫ'|'Ϭ'|'ϭ'|'Ϯ'|'ϯ'
		//////	|'\u2C80'..'\u2CFF'
		//////	//oval
		//////	| '\uD80C\uDE86' |'\uD80C\uDE87'
		//////	
		//////	//cartouche
		//////	|'\uD80C\uDF79' |'\uD80C\uDF7A'
		//////	
		//////	//serech
		//////	|'\uD80C\uDE58' | '\uD80C\uDE82'
		////)+;
		////terminal EGYSTRING: (!(' '|'\n'|'\t'|'\r'| '§' | '#'|'%'|';'
		////	// interfixes
		////	|'.'|','|':'|'-'|'~'|'\u2261'|'\u22ee'
		////	// brackets
		////	|'('|')'|'<'|'>'|'?'
		////	|'{' | '}'
		////	|'\u2E22' | '\u2E23'
		////	|'@'
		////	
		////))+;
		//// textual criticism interfixes
		//Interfix: //	InterfixFlexion | InterfixLexical |
		//	InterfixSuffixPronomLexical | InterfixPrefixNonLexical | InterfixPrefixLexical | InterfixConnectionSyllabicGroup;
		public ParserRule getRule() { return rule; }

		////	InterfixFlexion | InterfixLexical |
		//InterfixSuffixPronomLexical | InterfixPrefixNonLexical | InterfixPrefixLexical | InterfixConnectionSyllabicGroup
		public Alternatives getAlternatives() { return cAlternatives; }

		////	InterfixFlexion | InterfixLexical |
		//InterfixSuffixPronomLexical
		public RuleCall getInterfixSuffixPronomLexicalParserRuleCall_0() { return cInterfixSuffixPronomLexicalParserRuleCall_0; }

		//InterfixPrefixNonLexical
		public RuleCall getInterfixPrefixNonLexicalParserRuleCall_1() { return cInterfixPrefixNonLexicalParserRuleCall_1; }

		//InterfixPrefixLexical
		public RuleCall getInterfixPrefixLexicalParserRuleCall_2() { return cInterfixPrefixLexicalParserRuleCall_2; }

		//InterfixConnectionSyllabicGroup
		public RuleCall getInterfixConnectionSyllabicGroupParserRuleCall_3() { return cInterfixConnectionSyllabicGroupParserRuleCall_3; }
	}

	public class InterfixLexicalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InterfixLexical");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInterfixLexicalAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCommaKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//InterfixLexical:
		//	{InterfixLexical} ",";
		public ParserRule getRule() { return rule; }

		//{InterfixLexical} ","
		public Group getGroup() { return cGroup; }

		//{InterfixLexical}
		public Action getInterfixLexicalAction_0() { return cInterfixLexicalAction_0; }

		//","
		public Keyword getCommaKeyword_1() { return cCommaKeyword_1; }
	}

	public class InterfixFlexionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InterfixFlexion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInterfixFlexionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//InterfixFlexion:
		//	{InterfixFlexion} ".";
		public ParserRule getRule() { return rule; }

		//{InterfixFlexion} "."
		public Group getGroup() { return cGroup; }

		//{InterfixFlexion}
		public Action getInterfixFlexionAction_0() { return cInterfixFlexionAction_0; }

		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
	}

	public class InterfixSuffixPronomLexicalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InterfixSuffixPronomLexical");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInterfixSuffixPronomLexicalAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIdenticalToKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//InterfixSuffixPronomLexical:
		//	{InterfixSuffixPronomLexical} "≡";
		public ParserRule getRule() { return rule; }

		//{InterfixSuffixPronomLexical} "≡"
		public Group getGroup() { return cGroup; }

		//{InterfixSuffixPronomLexical}
		public Action getInterfixSuffixPronomLexicalAction_0() { return cInterfixSuffixPronomLexicalAction_0; }

		//"≡"
		public Keyword getIdenticalToKeyword_1() { return cIdenticalToKeyword_1; }
	}

	public class InterfixPrefixNonLexicalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InterfixPrefixNonLexical");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInterfixPrefixNonLexicalAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//InterfixPrefixNonLexical:
		//	{InterfixPrefixNonLexical} ":";
		public ParserRule getRule() { return rule; }

		//{InterfixPrefixNonLexical} ":"
		public Group getGroup() { return cGroup; }

		//{InterfixPrefixNonLexical}
		public Action getInterfixPrefixNonLexicalAction_0() { return cInterfixPrefixNonLexicalAction_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
	}

	public class InterfixPrefixLexicalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InterfixPrefixLexical");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInterfixPrefixLexicalAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cVerticalEllipsisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//InterfixPrefixLexical:
		//	{InterfixPrefixLexical} "⋮";
		public ParserRule getRule() { return rule; }

		//{InterfixPrefixLexical} "⋮"
		public Group getGroup() { return cGroup; }

		//{InterfixPrefixLexical}
		public Action getInterfixPrefixLexicalAction_0() { return cInterfixPrefixLexicalAction_0; }

		//"⋮"
		public Keyword getVerticalEllipsisKeyword_1() { return cVerticalEllipsisKeyword_1; }
	}

	public class InterfixConnectionSyllabicGroupElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InterfixConnectionSyllabicGroup");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInterfixConnectionSyllabicGroupAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTildeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		////InterfixCompountWords:
		////	{InterfixCompountWords}
		////	'-'
		////;
		//InterfixConnectionSyllabicGroup:
		//	{InterfixConnectionSyllabicGroup} "~";
		public ParserRule getRule() { return rule; }

		//{InterfixConnectionSyllabicGroup} "~"
		public Group getGroup() { return cGroup; }

		//{InterfixConnectionSyllabicGroup}
		public Action getInterfixConnectionSyllabicGroupAction_0() { return cInterfixConnectionSyllabicGroupAction_0; }

		//"~"
		public Keyword getTildeKeyword_1() { return cTildeKeyword_1; }
	}

	public class BracketsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Brackets");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRasurParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAncientExpandedParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cRestorationOverRasurParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cExpandedParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cDisputableReadingParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cEmendationParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cLacunaParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cDeletionParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cExpandedColumnParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cPartialDestructionParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cDestructionParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		
		//// textual criticism brackets
		////	 | Cartouche | Serech 
		////	|Oval
		//Brackets:
		//	Rasur | AncientExpanded | RestorationOverRasur | Expanded | DisputableReading | Emendation | Lacuna | Deletion |
		//	ExpandedColumn | PartialDestruction | Destruction;
		public ParserRule getRule() { return rule; }

		//Rasur | AncientExpanded | RestorationOverRasur | Expanded | DisputableReading | Emendation | Lacuna | Deletion |
		//ExpandedColumn | PartialDestruction | Destruction
		public Alternatives getAlternatives() { return cAlternatives; }

		//Rasur
		public RuleCall getRasurParserRuleCall_0() { return cRasurParserRuleCall_0; }

		//AncientExpanded
		public RuleCall getAncientExpandedParserRuleCall_1() { return cAncientExpandedParserRuleCall_1; }

		//RestorationOverRasur
		public RuleCall getRestorationOverRasurParserRuleCall_2() { return cRestorationOverRasurParserRuleCall_2; }

		//Expanded
		public RuleCall getExpandedParserRuleCall_3() { return cExpandedParserRuleCall_3; }

		//DisputableReading
		public RuleCall getDisputableReadingParserRuleCall_4() { return cDisputableReadingParserRuleCall_4; }

		//Emendation
		public RuleCall getEmendationParserRuleCall_5() { return cEmendationParserRuleCall_5; }

		//Lacuna
		public RuleCall getLacunaParserRuleCall_6() { return cLacunaParserRuleCall_6; }

		//Deletion
		public RuleCall getDeletionParserRuleCall_7() { return cDeletionParserRuleCall_7; }

		//ExpandedColumn
		public RuleCall getExpandedColumnParserRuleCall_8() { return cExpandedColumnParserRuleCall_8; }

		//PartialDestruction
		public RuleCall getPartialDestructionParserRuleCall_9() { return cPartialDestructionParserRuleCall_9; }

		//Destruction
		public RuleCall getDestructionParserRuleCall_10() { return cDestructionParserRuleCall_10; }
	}

	public class ExpandedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expanded");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExpandedAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cWCharAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cWCharNoExpandedParserRuleCall_2_0 = (RuleCall)cWCharAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		////Cartouche:
		////	{Expanded}
		////	'\uD80C\uDF79' wChar+=NoCartouche+ '\uD80C\uDF7A' //'\uD80C\uDF7A'
		////;
		////
		////Serech:
		////	{Serech}
		////	'\uD80C\uDE58' wChar+=Chars+ '\uD80C\uDE82' //'\uD80C\uDE82'
		////;
		////Oval:
		////	{Oval}
		////	'\uD80C\uDE86' wChar+=Chars+ '\uD80C\uDE86' //\uD80C\uDE87
		////;
		////
		////NoCartouche:
		////	Interfix | Rasur | AncientExpanded | RestorationOverRasur |
		////	Expanded  | DisputableReading | Emendation | Lacuna | Deletion | ExpandedColumn  
		////	| PartialDestruction | Destruction | Chars
		////;
		//Expanded:
		//	{Expanded} "(" wChar+=NoExpanded+ ")";
		public ParserRule getRule() { return rule; }

		//{Expanded} "(" wChar+=NoExpanded+ ")"
		public Group getGroup() { return cGroup; }

		//{Expanded}
		public Action getExpandedAction_0() { return cExpandedAction_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//wChar+=NoExpanded+
		public Assignment getWCharAssignment_2() { return cWCharAssignment_2; }

		//NoExpanded
		public RuleCall getWCharNoExpandedParserRuleCall_2_0() { return cWCharNoExpandedParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class NoExpandedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NoExpanded");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInterfixParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCharsParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//NoExpanded:
		//	Interfix | Chars;
		public ParserRule getRule() { return rule; }

		//Interfix | Chars
		public Alternatives getAlternatives() { return cAlternatives; }

		//Interfix
		public RuleCall getInterfixParserRuleCall_0() { return cInterfixParserRuleCall_0; }

		//Chars
		public RuleCall getCharsParserRuleCall_1() { return cCharsParserRuleCall_1; }
	}

	public class EmendationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Emendation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEmendationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cWCharAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cWCharNoEmendationParserRuleCall_2_0 = (RuleCall)cWCharAssignment_2.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Emendation:
		//	{Emendation} "<" wChar+=NoEmendation+ ">";
		public ParserRule getRule() { return rule; }

		//{Emendation} "<" wChar+=NoEmendation+ ">"
		public Group getGroup() { return cGroup; }

		//{Emendation}
		public Action getEmendationAction_0() { return cEmendationAction_0; }

		//"<"
		public Keyword getLessThanSignKeyword_1() { return cLessThanSignKeyword_1; }

		//wChar+=NoEmendation+
		public Assignment getWCharAssignment_2() { return cWCharAssignment_2; }

		//NoEmendation
		public RuleCall getWCharNoEmendationParserRuleCall_2_0() { return cWCharNoEmendationParserRuleCall_2_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_3() { return cGreaterThanSignKeyword_3; }
	}

	public class NoEmendationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NoEmendation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInterfixParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExpandedParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCharsParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//NoEmendation:
		//	Interfix | Expanded | Chars;
		public ParserRule getRule() { return rule; }

		//Interfix | Expanded | Chars
		public Alternatives getAlternatives() { return cAlternatives; }

		//Interfix
		public RuleCall getInterfixParserRuleCall_0() { return cInterfixParserRuleCall_0; }

		//Expanded
		public RuleCall getExpandedParserRuleCall_1() { return cExpandedParserRuleCall_1; }

		//Chars
		public RuleCall getCharsParserRuleCall_2() { return cCharsParserRuleCall_2; }
	}

	public class DisputableReadingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DisputableReading");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDisputableReadingAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cReversedQuestionMarkKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cWCharAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cWCharNoDisputableReadingParserRuleCall_2_0 = (RuleCall)cWCharAssignment_2.eContents().get(0);
		private final Keyword cQuestionMarkKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//DisputableReading:
		//	{DisputableReading} "⸮" wChar+=NoDisputableReading+ "?";
		public ParserRule getRule() { return rule; }

		//{DisputableReading} "⸮" wChar+=NoDisputableReading+ "?"
		public Group getGroup() { return cGroup; }

		//{DisputableReading}
		public Action getDisputableReadingAction_0() { return cDisputableReadingAction_0; }

		//"⸮"
		public Keyword getReversedQuestionMarkKeyword_1() { return cReversedQuestionMarkKeyword_1; }

		//wChar+=NoDisputableReading+
		public Assignment getWCharAssignment_2() { return cWCharAssignment_2; }

		//NoDisputableReading
		public RuleCall getWCharNoDisputableReadingParserRuleCall_2_0() { return cWCharNoDisputableReadingParserRuleCall_2_0; }

		//"?"
		public Keyword getQuestionMarkKeyword_3() { return cQuestionMarkKeyword_3; }
	}

	public class NoDisputableReadingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NoDisputableReading");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInterfixParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExpandedParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCharsParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//NoDisputableReading:
		//	Interfix | Expanded | Chars;
		public ParserRule getRule() { return rule; }

		//Interfix | Expanded | Chars
		public Alternatives getAlternatives() { return cAlternatives; }

		//Interfix
		public RuleCall getInterfixParserRuleCall_0() { return cInterfixParserRuleCall_0; }

		//Expanded
		public RuleCall getExpandedParserRuleCall_1() { return cExpandedParserRuleCall_1; }

		//Chars
		public RuleCall getCharsParserRuleCall_2() { return cCharsParserRuleCall_2; }
	}

	public class LacunaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Lacuna");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLacunaAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cWCharAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cWCharNoLacunaParserRuleCall_2_0 = (RuleCall)cWCharAssignment_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Lacuna:
		//	{Lacuna} "[" wChar+=NoLacuna+ "]";
		public ParserRule getRule() { return rule; }

		//{Lacuna} "[" wChar+=NoLacuna+ "]"
		public Group getGroup() { return cGroup; }

		//{Lacuna}
		public Action getLacunaAction_0() { return cLacunaAction_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }

		//wChar+=NoLacuna+
		public Assignment getWCharAssignment_2() { return cWCharAssignment_2; }

		//NoLacuna
		public RuleCall getWCharNoLacunaParserRuleCall_2_0() { return cWCharNoLacunaParserRuleCall_2_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}

	public class NoLacunaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NoLacuna");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInterfixParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExpandedParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCharsParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//NoLacuna:
		//	Interfix | Expanded | Chars;
		public ParserRule getRule() { return rule; }

		//Interfix | Expanded | Chars
		public Alternatives getAlternatives() { return cAlternatives; }

		//Interfix
		public RuleCall getInterfixParserRuleCall_0() { return cInterfixParserRuleCall_0; }

		//Expanded
		public RuleCall getExpandedParserRuleCall_1() { return cExpandedParserRuleCall_1; }

		//Chars
		public RuleCall getCharsParserRuleCall_2() { return cCharsParserRuleCall_2; }
	}

	public class DeletionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Deletion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDeletionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cWCharAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cWCharNoDeletionParserRuleCall_2_0 = (RuleCall)cWCharAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Deletion:
		//	{Deletion} "{" wChar+=NoDeletion+ "}";
		public ParserRule getRule() { return rule; }

		//{Deletion} "{" wChar+=NoDeletion+ "}"
		public Group getGroup() { return cGroup; }

		//{Deletion}
		public Action getDeletionAction_0() { return cDeletionAction_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//wChar+=NoDeletion+
		public Assignment getWCharAssignment_2() { return cWCharAssignment_2; }

		//NoDeletion
		public RuleCall getWCharNoDeletionParserRuleCall_2_0() { return cWCharNoDeletionParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class NoDeletionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NoDeletion");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInterfixParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCharsParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPartialDestructionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cExpandedParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//NoDeletion:
		//	Interfix | Chars | PartialDestruction | Expanded;
		public ParserRule getRule() { return rule; }

		//Interfix | Chars | PartialDestruction | Expanded
		public Alternatives getAlternatives() { return cAlternatives; }

		//Interfix
		public RuleCall getInterfixParserRuleCall_0() { return cInterfixParserRuleCall_0; }

		//Chars
		public RuleCall getCharsParserRuleCall_1() { return cCharsParserRuleCall_1; }

		//PartialDestruction
		public RuleCall getPartialDestructionParserRuleCall_2() { return cPartialDestructionParserRuleCall_2; }

		//Expanded
		public RuleCall getExpandedParserRuleCall_3() { return cExpandedParserRuleCall_3; }
	}

	public class ExpandedColumnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExpandedColumn");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExpandedColumnAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLessThanSignLessThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cWCharAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cWCharNoExpandedColumnParserRuleCall_2_0 = (RuleCall)cWCharAssignment_2.eContents().get(0);
		private final Keyword cGreaterThanSignGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ExpandedColumn:
		//	{ExpandedColumn} "<<" wChar+=NoExpandedColumn+ ">>";
		public ParserRule getRule() { return rule; }

		//{ExpandedColumn} "<<" wChar+=NoExpandedColumn+ ">>"
		public Group getGroup() { return cGroup; }

		//{ExpandedColumn}
		public Action getExpandedColumnAction_0() { return cExpandedColumnAction_0; }

		//"<<"
		public Keyword getLessThanSignLessThanSignKeyword_1() { return cLessThanSignLessThanSignKeyword_1; }

		//wChar+=NoExpandedColumn+
		public Assignment getWCharAssignment_2() { return cWCharAssignment_2; }

		//NoExpandedColumn
		public RuleCall getWCharNoExpandedColumnParserRuleCall_2_0() { return cWCharNoExpandedColumnParserRuleCall_2_0; }

		//">>"
		public Keyword getGreaterThanSignGreaterThanSignKeyword_3() { return cGreaterThanSignGreaterThanSignKeyword_3; }
	}

	public class NoExpandedColumnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NoExpandedColumn");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInterfixParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCharsParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cExpandedParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//NoExpandedColumn:
		//	Interfix | Chars | Expanded;
		public ParserRule getRule() { return rule; }

		//Interfix | Chars | Expanded
		public Alternatives getAlternatives() { return cAlternatives; }

		//Interfix
		public RuleCall getInterfixParserRuleCall_0() { return cInterfixParserRuleCall_0; }

		//Chars
		public RuleCall getCharsParserRuleCall_1() { return cCharsParserRuleCall_1; }

		//Expanded
		public RuleCall getExpandedParserRuleCall_2() { return cExpandedParserRuleCall_2; }
	}

	public class RasurElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Rasur");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRasurAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cWCharAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cWCharNoRasurParserRuleCall_2_0 = (RuleCall)cWCharAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Rasur:
		//	{Rasur} "{{" wChar+=NoRasur+ "}}";
		public ParserRule getRule() { return rule; }

		//{Rasur} "{{" wChar+=NoRasur+ "}}"
		public Group getGroup() { return cGroup; }

		//{Rasur}
		public Action getRasurAction_0() { return cRasurAction_0; }

		//"{{"
		public Keyword getLeftCurlyBracketLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketLeftCurlyBracketKeyword_1; }

		//wChar+=NoRasur+
		public Assignment getWCharAssignment_2() { return cWCharAssignment_2; }

		//NoRasur
		public RuleCall getWCharNoRasurParserRuleCall_2_0() { return cWCharNoRasurParserRuleCall_2_0; }

		//"}}"
		public Keyword getRightCurlyBracketRightCurlyBracketKeyword_3() { return cRightCurlyBracketRightCurlyBracketKeyword_3; }
	}

	public class NoRasurElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NoRasur");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInterfixParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCharsParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cExpandedParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//NoRasur:
		//	Interfix | Chars | Expanded;
		public ParserRule getRule() { return rule; }

		//Interfix | Chars | Expanded
		public Alternatives getAlternatives() { return cAlternatives; }

		//Interfix
		public RuleCall getInterfixParserRuleCall_0() { return cInterfixParserRuleCall_0; }

		//Chars
		public RuleCall getCharsParserRuleCall_1() { return cCharsParserRuleCall_1; }

		//Expanded
		public RuleCall getExpandedParserRuleCall_2() { return cExpandedParserRuleCall_2; }
	}

	public class AncientExpandedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AncientExpanded");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAncientExpandedAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cWCharAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cWCharNoAncientExpandedParserRuleCall_2_0 = (RuleCall)cWCharAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//AncientExpanded:
		//	{AncientExpanded} "((" wChar+=NoAncientExpanded+ "))";
		public ParserRule getRule() { return rule; }

		//{AncientExpanded} "((" wChar+=NoAncientExpanded+ "))"
		public Group getGroup() { return cGroup; }

		//{AncientExpanded}
		public Action getAncientExpandedAction_0() { return cAncientExpandedAction_0; }

		//"(("
		public Keyword getLeftParenthesisLeftParenthesisKeyword_1() { return cLeftParenthesisLeftParenthesisKeyword_1; }

		//wChar+=NoAncientExpanded+
		public Assignment getWCharAssignment_2() { return cWCharAssignment_2; }

		//NoAncientExpanded
		public RuleCall getWCharNoAncientExpandedParserRuleCall_2_0() { return cWCharNoAncientExpandedParserRuleCall_2_0; }

		//"))"
		public Keyword getRightParenthesisRightParenthesisKeyword_3() { return cRightParenthesisRightParenthesisKeyword_3; }
	}

	public class NoAncientExpandedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NoAncientExpanded");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCharsParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExpandedParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//NoAncientExpanded:
		//	Chars | Expanded;
		public ParserRule getRule() { return rule; }

		//Chars | Expanded
		public Alternatives getAlternatives() { return cAlternatives; }

		//Chars
		public RuleCall getCharsParserRuleCall_0() { return cCharsParserRuleCall_0; }

		//Expanded
		public RuleCall getExpandedParserRuleCall_1() { return cExpandedParserRuleCall_1; }
	}

	public class RestorationOverRasurElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RestorationOverRasur");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRestorationOverRasurAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cWCharAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cWCharNoRestorationOverRasurParserRuleCall_2_0 = (RuleCall)cWCharAssignment_2.eContents().get(0);
		private final Keyword cRightSquareBracketRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//RestorationOverRasur:
		//	{RestorationOverRasur} "[[" wChar+=NoRestorationOverRasur+ "]]";
		public ParserRule getRule() { return rule; }

		//{RestorationOverRasur} "[[" wChar+=NoRestorationOverRasur+ "]]"
		public Group getGroup() { return cGroup; }

		//{RestorationOverRasur}
		public Action getRestorationOverRasurAction_0() { return cRestorationOverRasurAction_0; }

		//"[["
		public Keyword getLeftSquareBracketLeftSquareBracketKeyword_1() { return cLeftSquareBracketLeftSquareBracketKeyword_1; }

		//wChar+=NoRestorationOverRasur+
		public Assignment getWCharAssignment_2() { return cWCharAssignment_2; }

		//NoRestorationOverRasur
		public RuleCall getWCharNoRestorationOverRasurParserRuleCall_2_0() { return cWCharNoRestorationOverRasurParserRuleCall_2_0; }

		//"]]"
		public Keyword getRightSquareBracketRightSquareBracketKeyword_3() { return cRightSquareBracketRightSquareBracketKeyword_3; }
	}

	public class NoRestorationOverRasurElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NoRestorationOverRasur");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCharsParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExpandedParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//NoRestorationOverRasur:
		//	Chars | Expanded;
		public ParserRule getRule() { return rule; }

		//Chars | Expanded
		public Alternatives getAlternatives() { return cAlternatives; }

		//Chars
		public RuleCall getCharsParserRuleCall_0() { return cCharsParserRuleCall_0; }

		//Expanded
		public RuleCall getExpandedParserRuleCall_1() { return cExpandedParserRuleCall_1; }
	}

	public class PartialDestructionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PartialDestruction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPartialDestructionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTopLeftHalfBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cWCharAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cWCharNoPartialDestructionParserRuleCall_2_0 = (RuleCall)cWCharAssignment_2.eContents().get(0);
		private final Keyword cTopRightHalfBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//PartialDestruction:
		//	{PartialDestruction} "⸢" wChar+=NoPartialDestruction+ "⸣";
		public ParserRule getRule() { return rule; }

		//{PartialDestruction} "⸢" wChar+=NoPartialDestruction+ "⸣"
		public Group getGroup() { return cGroup; }

		//{PartialDestruction}
		public Action getPartialDestructionAction_0() { return cPartialDestructionAction_0; }

		//"⸢"
		public Keyword getTopLeftHalfBracketKeyword_1() { return cTopLeftHalfBracketKeyword_1; }

		//wChar+=NoPartialDestruction+
		public Assignment getWCharAssignment_2() { return cWCharAssignment_2; }

		//NoPartialDestruction
		public RuleCall getWCharNoPartialDestructionParserRuleCall_2_0() { return cWCharNoPartialDestructionParserRuleCall_2_0; }

		//"⸣"
		public Keyword getTopRightHalfBracketKeyword_3() { return cTopRightHalfBracketKeyword_3; }
	}

	public class NoPartialDestructionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NoPartialDestruction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCharsParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDeletionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cInterfixParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cExpandedParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//NoPartialDestruction:
		//	Chars | Deletion | Interfix | Expanded;
		public ParserRule getRule() { return rule; }

		//Chars | Deletion | Interfix | Expanded
		public Alternatives getAlternatives() { return cAlternatives; }

		//Chars
		public RuleCall getCharsParserRuleCall_0() { return cCharsParserRuleCall_0; }

		//Deletion
		public RuleCall getDeletionParserRuleCall_1() { return cDeletionParserRuleCall_1; }

		//Interfix
		public RuleCall getInterfixParserRuleCall_2() { return cInterfixParserRuleCall_2; }

		//Expanded
		public RuleCall getExpandedParserRuleCall_3() { return cExpandedParserRuleCall_3; }
	}

	public class DestructionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Destruction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDestructionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cHyphenMinusHyphenMinusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCommentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCommentEGYSTRINGTerminalRuleCall_2_0 = (RuleCall)cCommentAssignment_2.eContents().get(0);
		private final Keyword cHyphenMinusHyphenMinusKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Destruction:
		//	{Destruction} "--" comment=EGYSTRING "--";
		public ParserRule getRule() { return rule; }

		//{Destruction} "--" comment=EGYSTRING "--"
		public Group getGroup() { return cGroup; }

		//{Destruction}
		public Action getDestructionAction_0() { return cDestructionAction_0; }

		//"--"
		public Keyword getHyphenMinusHyphenMinusKeyword_1() { return cHyphenMinusHyphenMinusKeyword_1; }

		//comment=EGYSTRING
		public Assignment getCommentAssignment_2() { return cCommentAssignment_2; }

		//EGYSTRING
		public RuleCall getCommentEGYSTRINGTerminalRuleCall_2_0() { return cCommentEGYSTRINGTerminalRuleCall_2_0; }

		//"--"
		public Keyword getHyphenMinusHyphenMinusKeyword_3() { return cHyphenMinusHyphenMinusKeyword_3; }
	}
	
	
	private TextContentElements pTextContent;
	private TextItemElements pTextItem;
	private SentenceElements pSentence;
	private SentenceItemElements pSentenceItem;
	private AbstractMarkerElements pAbstractMarker;
	private TerminalRule tWS;
	private TerminalRule tNEWLINE;
	private AmbivalenceElements pAmbivalence;
	private CaseElements pCase;
	private TerminalRule tCASESTRING;
	private SentenceItemNoAmbivalenceElements pSentenceItemNoAmbivalence;
	private VersMarkerElements pVersMarker;
	private VersFrontierMarkerElements pVersFrontierMarker;
	private VersbreakMarkerElements pVersbreakMarker;
	private BrokenVersbreakMarkerElements pBrokenVersbreakMarker;
	private MarkerElements pMarker;
	private TerminalRule tBETWEEN_HASHES;
	private WordElements pWord;
	private WordPartElements pWordPart;
	private WordEndingElements pWordEnding;
	private EndingElements pEnding;
	private DualEndingElements pDualEnding;
	private PluralEndingElements pPluralEnding;
	private InterfixFlexionEdingElements pInterfixFlexionEding;
	private InterfixLexicalEndingElements pInterfixLexicalEnding;
	private WordMiddleElements pWordMiddle;
	private CharsElements pChars;
	private SuffixCharsElements pSuffixChars;
	private TerminalRule tDUALSTRING_DOT;
	private TerminalRule tDUALSTRING_COMMA;
	private TerminalRule tPLURALSTRING_DOT;
	private TerminalRule tPLURALSTRING_COMMA;
	private TerminalRule tSUFFIXSTRING;
	private TerminalRule tEGYSTRING;
	private InterfixElements pInterfix;
	private InterfixLexicalElements pInterfixLexical;
	private InterfixFlexionElements pInterfixFlexion;
	private InterfixSuffixPronomLexicalElements pInterfixSuffixPronomLexical;
	private InterfixPrefixNonLexicalElements pInterfixPrefixNonLexical;
	private InterfixPrefixLexicalElements pInterfixPrefixLexical;
	private InterfixConnectionSyllabicGroupElements pInterfixConnectionSyllabicGroup;
	private BracketsElements pBrackets;
	private ExpandedElements pExpanded;
	private NoExpandedElements pNoExpanded;
	private EmendationElements pEmendation;
	private NoEmendationElements pNoEmendation;
	private DisputableReadingElements pDisputableReading;
	private NoDisputableReadingElements pNoDisputableReading;
	private LacunaElements pLacuna;
	private NoLacunaElements pNoLacuna;
	private DeletionElements pDeletion;
	private NoDeletionElements pNoDeletion;
	private ExpandedColumnElements pExpandedColumn;
	private NoExpandedColumnElements pNoExpandedColumn;
	private RasurElements pRasur;
	private NoRasurElements pNoRasur;
	private AncientExpandedElements pAncientExpanded;
	private NoAncientExpandedElements pNoAncientExpanded;
	private RestorationOverRasurElements pRestorationOverRasur;
	private NoRestorationOverRasurElements pNoRestorationOverRasur;
	private PartialDestructionElements pPartialDestruction;
	private NoPartialDestructionElements pNoPartialDestruction;
	private DestructionElements pDestruction;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public EgyDslGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.bbaw.bts.corpus.text.egy.EgyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//TextContent:
	//	{TextContent} (items+=TextItem ((" " | NEWLINE)? items+=TextItem)*);
	public TextContentElements getTextContentAccess() {
		return (pTextContent != null) ? pTextContent : (pTextContent = new TextContentElements());
	}
	
	public ParserRule getTextContentRule() {
		return getTextContentAccess().getRule();
	}

	//TextItem:
	//	Sentence;
	public TextItemElements getTextItemAccess() {
		return (pTextItem != null) ? pTextItem : (pTextItem = new TextItemElements());
	}
	
	public ParserRule getTextItemRule() {
		return getTextItemAccess().getRule();
	}

	//// sentence	
	//Sentence:
	//	"§" (items+=SentenceItem (" " NEWLINE? items+=SentenceItem)*) "§";
	public SentenceElements getSentenceAccess() {
		return (pSentence != null) ? pSentence : (pSentence = new SentenceElements());
	}
	
	public ParserRule getSentenceRule() {
		return getSentenceAccess().getRule();
	}

	//SentenceItem:
	//	Word | AbstractMarker | Ambivalence;
	public SentenceItemElements getSentenceItemAccess() {
		return (pSentenceItem != null) ? pSentenceItem : (pSentenceItem = new SentenceItemElements());
	}
	
	public ParserRule getSentenceItemRule() {
		return getSentenceItemAccess().getRule();
	}

	//AbstractMarker:
	//	Marker | VersMarker;
	public AbstractMarkerElements getAbstractMarkerAccess() {
		return (pAbstractMarker != null) ? pAbstractMarker : (pAbstractMarker = new AbstractMarkerElements());
	}
	
	public ParserRule getAbstractMarkerRule() {
		return getAbstractMarkerAccess().getRule();
	}

	//terminal WS:
	//	" " | "\t";
	public TerminalRule getWSRule() {
		return (tWS != null) ? tWS : (tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS"));
	} 

	//terminal NEWLINE:
	//	"\r" // New line on DOS or Unix 
	//	| "\n" | "\r\n" | "\t";
	public TerminalRule getNEWLINERule() {
		return (tNEWLINE != null) ? tNEWLINE : (tNEWLINE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "NEWLINE"));
	} 

	//Ambivalence:
	//	"%" (cases+=Case ("; " NEWLINE? cases+=Case)+) "%";
	public AmbivalenceElements getAmbivalenceAccess() {
		return (pAmbivalence != null) ? pAmbivalence : (pAmbivalence = new AmbivalenceElements());
	}
	
	public ParserRule getAmbivalenceRule() {
		return getAmbivalenceAccess().getRule();
	}

	//Case:
	//	name=CASESTRING NEWLINE? (items+=SentenceItemNoAmbivalence (" " NEWLINE? items+=SentenceItemNoAmbivalence)*);
	public CaseElements getCaseAccess() {
		return (pCase != null) ? pCase : (pCase = new CaseElements());
	}
	
	public ParserRule getCaseRule() {
		return getCaseAccess().getRule();
	}

	//terminal CASESTRING:
	//	"case " !":"+ ": ";
	public TerminalRule getCASESTRINGRule() {
		return (tCASESTRING != null) ? tCASESTRING : (tCASESTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "CASESTRING"));
	} 

	//SentenceItemNoAmbivalence:
	//	Word | AbstractMarker;
	public SentenceItemNoAmbivalenceElements getSentenceItemNoAmbivalenceAccess() {
		return (pSentenceItemNoAmbivalence != null) ? pSentenceItemNoAmbivalence : (pSentenceItemNoAmbivalence = new SentenceItemNoAmbivalenceElements());
	}
	
	public ParserRule getSentenceItemNoAmbivalenceRule() {
		return getSentenceItemNoAmbivalenceAccess().getRule();
	}

	//VersMarker:
	//	VersbreakMarker | VersFrontierMarker | BrokenVersbreakMarker;
	public VersMarkerElements getVersMarkerAccess() {
		return (pVersMarker != null) ? pVersMarker : (pVersMarker = new VersMarkerElements());
	}
	
	public ParserRule getVersMarkerRule() {
		return getVersMarkerAccess().getRule();
	}

	//VersFrontierMarker:
	//	{VersFrontierMarker} //'@mv'
	//	"󰂁";
	public VersFrontierMarkerElements getVersFrontierMarkerAccess() {
		return (pVersFrontierMarker != null) ? pVersFrontierMarker : (pVersFrontierMarker = new VersFrontierMarkerElements());
	}
	
	public ParserRule getVersFrontierMarkerRule() {
		return getVersFrontierMarkerAccess().getRule();
	}

	//VersbreakMarker:
	//	{VersbreakMarker} //'@v'
	//	"󰂀";
	public VersbreakMarkerElements getVersbreakMarkerAccess() {
		return (pVersbreakMarker != null) ? pVersbreakMarker : (pVersbreakMarker = new VersbreakMarkerElements());
	}
	
	public ParserRule getVersbreakMarkerRule() {
		return getVersbreakMarkerAccess().getRule();
	}

	//BrokenVersbreakMarker:
	//	{BrokenVersbreakMarker} //'@v'
	//	"󰂂";
	public BrokenVersbreakMarkerElements getBrokenVersbreakMarkerAccess() {
		return (pBrokenVersbreakMarker != null) ? pBrokenVersbreakMarker : (pBrokenVersbreakMarker = new BrokenVersbreakMarkerElements());
	}
	
	public ParserRule getBrokenVersbreakMarkerRule() {
		return getBrokenVersbreakMarkerAccess().getRule();
	}

	//Marker: //	('#' (type=(DUALSTRING|PLURALSTRING|EGYSTRING|LATINEGYSTRING) (': ' (NEWLINE)? name=(DUALSTRING|PLURALSTRING|EGYSTRING|LATINEGYSTRING))?) '#')
	//	type=BETWEEN_HASHES;
	public MarkerElements getMarkerAccess() {
		return (pMarker != null) ? pMarker : (pMarker = new MarkerElements());
	}
	
	public ParserRule getMarkerRule() {
		return getMarkerAccess().getRule();
	}

	//terminal BETWEEN_HASHES:
	//	"#" ("a".."z" | "A".."Z" | INT | EGYSTRING)* (": " ("a".."z" | "A".."Z" | INT | EGYSTRING)*)? "#";
	public TerminalRule getBETWEEN_HASHESRule() {
		return (tBETWEEN_HASHES != null) ? tBETWEEN_HASHES : (tBETWEEN_HASHES = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "BETWEEN_HASHES"));
	} 

	//// word
	//Word:
	//	{Word} (wChar+=WordPart ("-" wChar+=WordPart)*);
	public WordElements getWordAccess() {
		return (pWord != null) ? pWord : (pWord = new WordElements());
	}
	
	public ParserRule getWordRule() {
		return getWordAccess().getRule();
	}

	//WordPart:
	//	"="? (wChar+=WordMiddle wChar+=WordMiddle* wChar+=WordEnding? wChar+=WordEnding?);
	public WordPartElements getWordPartAccess() {
		return (pWordPart != null) ? pWordPart : (pWordPart = new WordPartElements());
	}
	
	public ParserRule getWordPartRule() {
		return getWordPartAccess().getRule();
	}

	//WordEnding:
	//	PluralEnding | DualEnding | Ending;
	public WordEndingElements getWordEndingAccess() {
		return (pWordEnding != null) ? pWordEnding : (pWordEnding = new WordEndingElements());
	}
	
	public ParserRule getWordEndingRule() {
		return getWordEndingAccess().getRule();
	}

	//Ending:
	//	chars=SuffixChars;
	public EndingElements getEndingAccess() {
		return (pEnding != null) ? pEnding : (pEnding = new EndingElements());
	}
	
	public ParserRule getEndingRule() {
		return getEndingAccess().getRule();
	}

	//DualEnding: //	{DualEnding}
	// chars=(DUALSTRING_COMMA | DUALSTRING_DOT);
	public DualEndingElements getDualEndingAccess() {
		return (pDualEnding != null) ? pDualEnding : (pDualEnding = new DualEndingElements());
	}
	
	public ParserRule getDualEndingRule() {
		return getDualEndingAccess().getRule();
	}

	//PluralEnding: //	{PluralEnding}
	// chars=(PLURALSTRING_COMMA | PLURALSTRING_DOT);
	public PluralEndingElements getPluralEndingAccess() {
		return (pPluralEnding != null) ? pPluralEnding : (pPluralEnding = new PluralEndingElements());
	}
	
	public ParserRule getPluralEndingRule() {
		return getPluralEndingAccess().getRule();
	}

	//InterfixFlexionEding:
	//	interfix=InterfixFlexion chars=SuffixChars;
	public InterfixFlexionEdingElements getInterfixFlexionEdingAccess() {
		return (pInterfixFlexionEding != null) ? pInterfixFlexionEding : (pInterfixFlexionEding = new InterfixFlexionEdingElements());
	}
	
	public ParserRule getInterfixFlexionEdingRule() {
		return getInterfixFlexionEdingAccess().getRule();
	}

	//InterfixLexicalEnding:
	//	interfix=InterfixLexical chars=SuffixChars;
	public InterfixLexicalEndingElements getInterfixLexicalEndingAccess() {
		return (pInterfixLexicalEnding != null) ? pInterfixLexicalEnding : (pInterfixLexicalEnding = new InterfixLexicalEndingElements());
	}
	
	public ParserRule getInterfixLexicalEndingRule() {
		return getInterfixLexicalEndingAccess().getRule();
	}

	//WordMiddle: //	{WordMiddle}
	//	Brackets | Chars;
	public WordMiddleElements getWordMiddleAccess() {
		return (pWordMiddle != null) ? pWordMiddle : (pWordMiddle = new WordMiddleElements());
	}
	
	public ParserRule getWordMiddleRule() {
		return getWordMiddleAccess().getRule();
	}

	//// Chars...
	//Chars:
	//	name=EGYSTRING;
	public CharsElements getCharsAccess() {
		return (pChars != null) ? pChars : (pChars = new CharsElements());
	}
	
	public ParserRule getCharsRule() {
		return getCharsAccess().getRule();
	}

	//// Chars...
	//SuffixChars:
	//	name=SUFFIXSTRING;
	public SuffixCharsElements getSuffixCharsAccess() {
		return (pSuffixChars != null) ? pSuffixChars : (pSuffixChars = new SuffixCharsElements());
	}
	
	public ParserRule getSuffixCharsRule() {
		return getSuffixCharsAccess().getRule();
	}

	//terminal DUALSTRING_DOT:
	//	".du";
	public TerminalRule getDUALSTRING_DOTRule() {
		return (tDUALSTRING_DOT != null) ? tDUALSTRING_DOT : (tDUALSTRING_DOT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DUALSTRING_DOT"));
	} 

	//terminal DUALSTRING_COMMA:
	//	",du";
	public TerminalRule getDUALSTRING_COMMARule() {
		return (tDUALSTRING_COMMA != null) ? tDUALSTRING_COMMA : (tDUALSTRING_COMMA = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DUALSTRING_COMMA"));
	} 

	//terminal PLURALSTRING_DOT:
	//	".pl";
	public TerminalRule getPLURALSTRING_DOTRule() {
		return (tPLURALSTRING_DOT != null) ? tPLURALSTRING_DOT : (tPLURALSTRING_DOT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "PLURALSTRING_DOT"));
	} 

	//terminal PLURALSTRING_COMMA:
	//	",pl";
	public TerminalRule getPLURALSTRING_COMMARule() {
		return (tPLURALSTRING_COMMA != null) ? tPLURALSTRING_COMMA : (tPLURALSTRING_COMMA = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "PLURALSTRING_COMMA"));
	} 

	//terminal SUFFIXSTRING:
	//	("." | ",") ("Ꜣ" | "j" | "y" | "w" | "n" | "s" | "k" | "t" | "ṯ" | "ı͗" | "ś" | "ı̯͗" | "ï" | "u̯" | "č" | "ṱ" | "a"
	//	| "ꜣ")+;
	public TerminalRule getSUFFIXSTRINGRule() {
		return (tSUFFIXSTRING != null) ? tSUFFIXSTRING : (tSUFFIXSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SUFFIXSTRING"));
	} 

	//terminal EGYSTRING:
	//	("Ꜣ" // coptic
	//	//	|  'Ⲁ''|''ⲁ''|''Ⲃ'|'ⲃ'|'Ⲅ'|'ⲅ'|'Ⲇ'|'ⲇ'|'Ⲉ'|'ⲉ'|'Ⲋ'|'ⲋ'|'Ⲍ'|'ⲍ'|'Ⲏ'|'ⲏ'|'Ⲑ'|'ⲑ'|'Ⲓ'|'ⲓ'|'Ⲕ'|'ⲕ'|'Ⲗ'|'ⲗ'|'Ⲙ'|'ⲙ'|'Ⲛ'|'ⲛ'|'Ⲝ'|'ⲝ'|'Ⲟ'|'ⲟ'|'Ⲡ'|'ⲡ'|'Ⲣ'|'ⲣ'|'Ⲥ'|'ⲥ'|'Ⲧ'|'ⲧ'|'Ⲩ'|'ⲩ'|'Ⲫ'|'ⲫ'|'Ⲭ'|'ⲭ'|'Ⲯ'|'ⲯ'|'Ⲱ'|'ⲱ'|'Ⲳ'|'ⲳ'|'Ⲵ'|'ⲵ'|'Ⲷ'|'ⲷ'|'Ⲹ'|'ⲹ'|'Ⲻ'|'ⲻ'|'Ⲽ'|'ⲽ'|'Ⲿ'|'ⲿ'|'Ⳁ'|'ⳁ'|'Ⳃ'|'ⳃ'|'Ⳅ'|'ⳅ'|'Ⳇ'|'ⳇ'|'Ⳉ'|'ⳉ'|'Ⳋ'|'ⳋ'|'Ⳍ'|'ⳍ'|'Ⳏ'|'ⳏ'|'Ⳑ'|'ⳑ'|'Ⳓ'|'ⳓ'|'Ⳕ'|'ⳕ'|'Ⳗ'|'ⳗ'|'Ⳙ'|'ⳙ'|'Ⳛ'|'ⳛ'|'Ⳝ'|'ⳝ'|'Ⳟ'|'ⳟ'|'Ⳡ'|'ⳡ'|'Ⳣ'|'ⳣ'|'ⳤ'|'⳥'|'⳦'|'⳧'|'⳨'|'⳩'|'⳪'|'Ⳬ'|'ⳬ'|'Ⳮ'|'ⳮ'|'⳯'|'⳰'|'⳱'|'Ⳳ'|'ⳳ'|'⳴'|'⳵'|'⳶'|'⳷'|'⳸'|'⳹'|'⳺'|'⳻'|'⳼'|'⳽'|'⳾'|'⳿'|'Ϡ'|'ϡ'|'Ϣ'|'ϣ'|'Ϥ'|'ϥ'|'Ϧ'|'ϧ'|'Ϩ'|'ϩ'|'Ϫ'|'ϫ'|'Ϭ'|'ϭ'|'Ϯ'|'ϯ'
	//	//oval
	//	//cartouche
	//	//serech
	//	| "j" | "y" | "Ꜥ" | "w" | "b" | "f" | "m" | "n" | "r" | "h" | "ḥ" | "ḫ" | "ẖ" | "z" | "s" | "š" | "q" | "k" | "g" | "t"
	//	| "ṯ" | "d" | "ḏ" | "ʾ" | "ı͗" | "ś" | "ḳ" | "ı̯͗" | "ï" | "u̯" | "č" | "č̣" | "ṭ" | "h̭" | "ṱ" | "a" | "i̭" | "ꜣ" |
	//	"J" | "Y" | "ꜥ" | "W" | "B" | "P" | "F" | "M" | "N" | "R" | "L" | "H" | "Ḥ" | "Ḫ" | "H̱" | "Z" | "S" | "Š" | "Q" |
	//	"K" | "G" | "T" | "Ṯ" | "D" | "Ḏ" | "I͗" | "Ś" | "Ḳ" | "Č" | "Č̣" | "Ṭ" | "H̭" | "Ṱ" | "A" | "I" | "Ⲁ".."⳿" | "𓊆" |
	//	"𓊇" | "𓍹" | "𓍺" | "𓉘" | "𓊂" | "p" | "l")+;
	public TerminalRule getEGYSTRINGRule() {
		return (tEGYSTRING != null) ? tEGYSTRING : (tEGYSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "EGYSTRING"));
	} 

	////terminal LATINEGYSTRING:
	////	(
	////	//'\uA722'|'Ꜥ'|'ḥ'|'ḫ'|'ẖ'|'š'|'ṯ'|'ḏ'|'ʾ'|'ı͗'|'ś'|'ḳ'|'ı̯͗'|'ï'|'u̯'|'č'|'č̣'|'ṭ'|'h̭'|'ṱ'|'i̭'|'ꜣ'|'ꜥ'|'Ḥ'|'Ḫ'|'H̱'|'Š'|'Ṯ'|'Ḏ'|'I͗'|'Ś'|'Ḳ'|'Č'|'Č̣'|'Ṭ'|'H̭'|'Ṱ'
	////	
	////	//latin
	////	'a'|'c'|'z'|'A'|'Z'|'0'..'9'|'ä'|'ö'|'ü'|'ß'|'Ä'|'Ö'|'Ü' | EGYSTRING 
	////// coptic
	//////	|  'Ⲁ''|''ⲁ''|''Ⲃ'|'ⲃ'|'Ⲅ'|'ⲅ'|'Ⲇ'|'ⲇ'|'Ⲉ'|'ⲉ'|'Ⲋ'|'ⲋ'|'Ⲍ'|'ⲍ'|'Ⲏ'|'ⲏ'|'Ⲑ'|'ⲑ'|'Ⲓ'|'ⲓ'|'Ⲕ'|'ⲕ'|'Ⲗ'|'ⲗ'|'Ⲙ'|'ⲙ'|'Ⲛ'|'ⲛ'|'Ⲝ'|'ⲝ'|'Ⲟ'|'ⲟ'|'Ⲡ'|'ⲡ'|'Ⲣ'|'ⲣ'|'Ⲥ'|'ⲥ'|'Ⲧ'|'ⲧ'|'Ⲩ'|'ⲩ'|'Ⲫ'|'ⲫ'|'Ⲭ'|'ⲭ'|'Ⲯ'|'ⲯ'|'Ⲱ'|'ⲱ'|'Ⲳ'|'ⲳ'|'Ⲵ'|'ⲵ'|'Ⲷ'|'ⲷ'|'Ⲹ'|'ⲹ'|'Ⲻ'|'ⲻ'|'Ⲽ'|'ⲽ'|'Ⲿ'|'ⲿ'|'Ⳁ'|'ⳁ'|'Ⳃ'|'ⳃ'|'Ⳅ'|'ⳅ'|'Ⳇ'|'ⳇ'|'Ⳉ'|'ⳉ'|'Ⳋ'|'ⳋ'|'Ⳍ'|'ⳍ'|'Ⳏ'|'ⳏ'|'Ⳑ'|'ⳑ'|'Ⳓ'|'ⳓ'|'Ⳕ'|'ⳕ'|'Ⳗ'|'ⳗ'|'Ⳙ'|'ⳙ'|'Ⳛ'|'ⳛ'|'Ⳝ'|'ⳝ'|'Ⳟ'|'ⳟ'|'Ⳡ'|'ⳡ'|'Ⳣ'|'ⳣ'|'ⳤ'|'⳥'|'⳦'|'⳧'|'⳨'|'⳩'|'⳪'|'Ⳬ'|'ⳬ'|'Ⳮ'|'ⳮ'|'⳯'|'⳰'|'⳱'|'Ⳳ'|'ⳳ'|'⳴'|'⳵'|'⳶'|'⳷'|'⳸'|'⳹'|'⳺'|'⳻'|'⳼'|'⳽'|'⳾'|'⳿'|'Ϡ'|'ϡ'|'Ϣ'|'ϣ'|'Ϥ'|'ϥ'|'Ϧ'|'ϧ'|'Ϩ'|'ϩ'|'Ϫ'|'ϫ'|'Ϭ'|'ϭ'|'Ϯ'|'ϯ'
	//////	|'\u2C80'..'\u2CFF'
	//////	//oval
	//////	| '\uD80C\uDE86' |'\uD80C\uDE87'
	//////	
	//////	//cartouche
	//////	|'\uD80C\uDF79' |'\uD80C\uDF7A'
	//////	
	//////	//serech
	//////	|'\uD80C\uDE58' | '\uD80C\uDE82'
	////)+;
	////terminal EGYSTRING: (!(' '|'\n'|'\t'|'\r'| '§' | '#'|'%'|';'
	////	// interfixes
	////	|'.'|','|':'|'-'|'~'|'\u2261'|'\u22ee'
	////	// brackets
	////	|'('|')'|'<'|'>'|'?'
	////	|'{' | '}'
	////	|'\u2E22' | '\u2E23'
	////	|'@'
	////	
	////))+;
	//// textual criticism interfixes
	//Interfix: //	InterfixFlexion | InterfixLexical |
	//	InterfixSuffixPronomLexical | InterfixPrefixNonLexical | InterfixPrefixLexical | InterfixConnectionSyllabicGroup;
	public InterfixElements getInterfixAccess() {
		return (pInterfix != null) ? pInterfix : (pInterfix = new InterfixElements());
	}
	
	public ParserRule getInterfixRule() {
		return getInterfixAccess().getRule();
	}

	//InterfixLexical:
	//	{InterfixLexical} ",";
	public InterfixLexicalElements getInterfixLexicalAccess() {
		return (pInterfixLexical != null) ? pInterfixLexical : (pInterfixLexical = new InterfixLexicalElements());
	}
	
	public ParserRule getInterfixLexicalRule() {
		return getInterfixLexicalAccess().getRule();
	}

	//InterfixFlexion:
	//	{InterfixFlexion} ".";
	public InterfixFlexionElements getInterfixFlexionAccess() {
		return (pInterfixFlexion != null) ? pInterfixFlexion : (pInterfixFlexion = new InterfixFlexionElements());
	}
	
	public ParserRule getInterfixFlexionRule() {
		return getInterfixFlexionAccess().getRule();
	}

	//InterfixSuffixPronomLexical:
	//	{InterfixSuffixPronomLexical} "≡";
	public InterfixSuffixPronomLexicalElements getInterfixSuffixPronomLexicalAccess() {
		return (pInterfixSuffixPronomLexical != null) ? pInterfixSuffixPronomLexical : (pInterfixSuffixPronomLexical = new InterfixSuffixPronomLexicalElements());
	}
	
	public ParserRule getInterfixSuffixPronomLexicalRule() {
		return getInterfixSuffixPronomLexicalAccess().getRule();
	}

	//InterfixPrefixNonLexical:
	//	{InterfixPrefixNonLexical} ":";
	public InterfixPrefixNonLexicalElements getInterfixPrefixNonLexicalAccess() {
		return (pInterfixPrefixNonLexical != null) ? pInterfixPrefixNonLexical : (pInterfixPrefixNonLexical = new InterfixPrefixNonLexicalElements());
	}
	
	public ParserRule getInterfixPrefixNonLexicalRule() {
		return getInterfixPrefixNonLexicalAccess().getRule();
	}

	//InterfixPrefixLexical:
	//	{InterfixPrefixLexical} "⋮";
	public InterfixPrefixLexicalElements getInterfixPrefixLexicalAccess() {
		return (pInterfixPrefixLexical != null) ? pInterfixPrefixLexical : (pInterfixPrefixLexical = new InterfixPrefixLexicalElements());
	}
	
	public ParserRule getInterfixPrefixLexicalRule() {
		return getInterfixPrefixLexicalAccess().getRule();
	}

	////InterfixCompountWords:
	////	{InterfixCompountWords}
	////	'-'
	////;
	//InterfixConnectionSyllabicGroup:
	//	{InterfixConnectionSyllabicGroup} "~";
	public InterfixConnectionSyllabicGroupElements getInterfixConnectionSyllabicGroupAccess() {
		return (pInterfixConnectionSyllabicGroup != null) ? pInterfixConnectionSyllabicGroup : (pInterfixConnectionSyllabicGroup = new InterfixConnectionSyllabicGroupElements());
	}
	
	public ParserRule getInterfixConnectionSyllabicGroupRule() {
		return getInterfixConnectionSyllabicGroupAccess().getRule();
	}

	//// textual criticism brackets
	////	 | Cartouche | Serech 
	////	|Oval
	//Brackets:
	//	Rasur | AncientExpanded | RestorationOverRasur | Expanded | DisputableReading | Emendation | Lacuna | Deletion |
	//	ExpandedColumn | PartialDestruction | Destruction;
	public BracketsElements getBracketsAccess() {
		return (pBrackets != null) ? pBrackets : (pBrackets = new BracketsElements());
	}
	
	public ParserRule getBracketsRule() {
		return getBracketsAccess().getRule();
	}

	////Cartouche:
	////	{Expanded}
	////	'\uD80C\uDF79' wChar+=NoCartouche+ '\uD80C\uDF7A' //'\uD80C\uDF7A'
	////;
	////
	////Serech:
	////	{Serech}
	////	'\uD80C\uDE58' wChar+=Chars+ '\uD80C\uDE82' //'\uD80C\uDE82'
	////;
	////Oval:
	////	{Oval}
	////	'\uD80C\uDE86' wChar+=Chars+ '\uD80C\uDE86' //\uD80C\uDE87
	////;
	////
	////NoCartouche:
	////	Interfix | Rasur | AncientExpanded | RestorationOverRasur |
	////	Expanded  | DisputableReading | Emendation | Lacuna | Deletion | ExpandedColumn  
	////	| PartialDestruction | Destruction | Chars
	////;
	//Expanded:
	//	{Expanded} "(" wChar+=NoExpanded+ ")";
	public ExpandedElements getExpandedAccess() {
		return (pExpanded != null) ? pExpanded : (pExpanded = new ExpandedElements());
	}
	
	public ParserRule getExpandedRule() {
		return getExpandedAccess().getRule();
	}

	//NoExpanded:
	//	Interfix | Chars;
	public NoExpandedElements getNoExpandedAccess() {
		return (pNoExpanded != null) ? pNoExpanded : (pNoExpanded = new NoExpandedElements());
	}
	
	public ParserRule getNoExpandedRule() {
		return getNoExpandedAccess().getRule();
	}

	//Emendation:
	//	{Emendation} "<" wChar+=NoEmendation+ ">";
	public EmendationElements getEmendationAccess() {
		return (pEmendation != null) ? pEmendation : (pEmendation = new EmendationElements());
	}
	
	public ParserRule getEmendationRule() {
		return getEmendationAccess().getRule();
	}

	//NoEmendation:
	//	Interfix | Expanded | Chars;
	public NoEmendationElements getNoEmendationAccess() {
		return (pNoEmendation != null) ? pNoEmendation : (pNoEmendation = new NoEmendationElements());
	}
	
	public ParserRule getNoEmendationRule() {
		return getNoEmendationAccess().getRule();
	}

	//DisputableReading:
	//	{DisputableReading} "⸮" wChar+=NoDisputableReading+ "?";
	public DisputableReadingElements getDisputableReadingAccess() {
		return (pDisputableReading != null) ? pDisputableReading : (pDisputableReading = new DisputableReadingElements());
	}
	
	public ParserRule getDisputableReadingRule() {
		return getDisputableReadingAccess().getRule();
	}

	//NoDisputableReading:
	//	Interfix | Expanded | Chars;
	public NoDisputableReadingElements getNoDisputableReadingAccess() {
		return (pNoDisputableReading != null) ? pNoDisputableReading : (pNoDisputableReading = new NoDisputableReadingElements());
	}
	
	public ParserRule getNoDisputableReadingRule() {
		return getNoDisputableReadingAccess().getRule();
	}

	//Lacuna:
	//	{Lacuna} "[" wChar+=NoLacuna+ "]";
	public LacunaElements getLacunaAccess() {
		return (pLacuna != null) ? pLacuna : (pLacuna = new LacunaElements());
	}
	
	public ParserRule getLacunaRule() {
		return getLacunaAccess().getRule();
	}

	//NoLacuna:
	//	Interfix | Expanded | Chars;
	public NoLacunaElements getNoLacunaAccess() {
		return (pNoLacuna != null) ? pNoLacuna : (pNoLacuna = new NoLacunaElements());
	}
	
	public ParserRule getNoLacunaRule() {
		return getNoLacunaAccess().getRule();
	}

	//Deletion:
	//	{Deletion} "{" wChar+=NoDeletion+ "}";
	public DeletionElements getDeletionAccess() {
		return (pDeletion != null) ? pDeletion : (pDeletion = new DeletionElements());
	}
	
	public ParserRule getDeletionRule() {
		return getDeletionAccess().getRule();
	}

	//NoDeletion:
	//	Interfix | Chars | PartialDestruction | Expanded;
	public NoDeletionElements getNoDeletionAccess() {
		return (pNoDeletion != null) ? pNoDeletion : (pNoDeletion = new NoDeletionElements());
	}
	
	public ParserRule getNoDeletionRule() {
		return getNoDeletionAccess().getRule();
	}

	//ExpandedColumn:
	//	{ExpandedColumn} "<<" wChar+=NoExpandedColumn+ ">>";
	public ExpandedColumnElements getExpandedColumnAccess() {
		return (pExpandedColumn != null) ? pExpandedColumn : (pExpandedColumn = new ExpandedColumnElements());
	}
	
	public ParserRule getExpandedColumnRule() {
		return getExpandedColumnAccess().getRule();
	}

	//NoExpandedColumn:
	//	Interfix | Chars | Expanded;
	public NoExpandedColumnElements getNoExpandedColumnAccess() {
		return (pNoExpandedColumn != null) ? pNoExpandedColumn : (pNoExpandedColumn = new NoExpandedColumnElements());
	}
	
	public ParserRule getNoExpandedColumnRule() {
		return getNoExpandedColumnAccess().getRule();
	}

	//Rasur:
	//	{Rasur} "{{" wChar+=NoRasur+ "}}";
	public RasurElements getRasurAccess() {
		return (pRasur != null) ? pRasur : (pRasur = new RasurElements());
	}
	
	public ParserRule getRasurRule() {
		return getRasurAccess().getRule();
	}

	//NoRasur:
	//	Interfix | Chars | Expanded;
	public NoRasurElements getNoRasurAccess() {
		return (pNoRasur != null) ? pNoRasur : (pNoRasur = new NoRasurElements());
	}
	
	public ParserRule getNoRasurRule() {
		return getNoRasurAccess().getRule();
	}

	//AncientExpanded:
	//	{AncientExpanded} "((" wChar+=NoAncientExpanded+ "))";
	public AncientExpandedElements getAncientExpandedAccess() {
		return (pAncientExpanded != null) ? pAncientExpanded : (pAncientExpanded = new AncientExpandedElements());
	}
	
	public ParserRule getAncientExpandedRule() {
		return getAncientExpandedAccess().getRule();
	}

	//NoAncientExpanded:
	//	Chars | Expanded;
	public NoAncientExpandedElements getNoAncientExpandedAccess() {
		return (pNoAncientExpanded != null) ? pNoAncientExpanded : (pNoAncientExpanded = new NoAncientExpandedElements());
	}
	
	public ParserRule getNoAncientExpandedRule() {
		return getNoAncientExpandedAccess().getRule();
	}

	//RestorationOverRasur:
	//	{RestorationOverRasur} "[[" wChar+=NoRestorationOverRasur+ "]]";
	public RestorationOverRasurElements getRestorationOverRasurAccess() {
		return (pRestorationOverRasur != null) ? pRestorationOverRasur : (pRestorationOverRasur = new RestorationOverRasurElements());
	}
	
	public ParserRule getRestorationOverRasurRule() {
		return getRestorationOverRasurAccess().getRule();
	}

	//NoRestorationOverRasur:
	//	Chars | Expanded;
	public NoRestorationOverRasurElements getNoRestorationOverRasurAccess() {
		return (pNoRestorationOverRasur != null) ? pNoRestorationOverRasur : (pNoRestorationOverRasur = new NoRestorationOverRasurElements());
	}
	
	public ParserRule getNoRestorationOverRasurRule() {
		return getNoRestorationOverRasurAccess().getRule();
	}

	//PartialDestruction:
	//	{PartialDestruction} "⸢" wChar+=NoPartialDestruction+ "⸣";
	public PartialDestructionElements getPartialDestructionAccess() {
		return (pPartialDestruction != null) ? pPartialDestruction : (pPartialDestruction = new PartialDestructionElements());
	}
	
	public ParserRule getPartialDestructionRule() {
		return getPartialDestructionAccess().getRule();
	}

	//NoPartialDestruction:
	//	Chars | Deletion | Interfix | Expanded;
	public NoPartialDestructionElements getNoPartialDestructionAccess() {
		return (pNoPartialDestruction != null) ? pNoPartialDestruction : (pNoPartialDestruction = new NoPartialDestructionElements());
	}
	
	public ParserRule getNoPartialDestructionRule() {
		return getNoPartialDestructionAccess().getRule();
	}

	//Destruction:
	//	{Destruction} "--" comment=EGYSTRING "--";
	public DestructionElements getDestructionAccess() {
		return (pDestruction != null) ? pDestruction : (pDestruction = new DestructionElements());
	}
	
	public ParserRule getDestructionRule() {
		return getDestructionAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
