/*
* generated by Xtext
*/
package org.bbaw.bts.corpus.text.egy.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.bbaw.bts.corpus.text.egy.services.EgyDslGrammarAccess;

public class EgyDslParser extends AbstractContentAssistParser {
	
	@Inject
	private EgyDslGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.bbaw.bts.corpus.text.egy.ui.contentassist.antlr.internal.InternalEgyDslParser createParser() {
		org.bbaw.bts.corpus.text.egy.ui.contentassist.antlr.internal.InternalEgyDslParser result = new org.bbaw.bts.corpus.text.egy.ui.contentassist.antlr.internal.InternalEgyDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getTextContentAccess().getAlternatives_1_1_0(), "rule__TextContent__Alternatives_1_1_0");
					put(grammarAccess.getSentenceItemAccess().getAlternatives(), "rule__SentenceItem__Alternatives");
					put(grammarAccess.getSentenceItemAccess().getAlternatives_0_1(), "rule__SentenceItem__Alternatives_0_1");
					put(grammarAccess.getSentenceItemAccess().getAlternatives_1_1(), "rule__SentenceItem__Alternatives_1_1");
					put(grammarAccess.getSentenceItemAccess().getAlternatives_2_1(), "rule__SentenceItem__Alternatives_2_1");
					put(grammarAccess.getAbstractMarkerAccess().getAlternatives(), "rule__AbstractMarker__Alternatives");
					put(grammarAccess.getAmbivalenceAccess().getAlternatives_1_1_1(), "rule__Ambivalence__Alternatives_1_1_1");
					put(grammarAccess.getCaseAccess().getAlternatives_3(), "rule__Case__Alternatives_3");
					put(grammarAccess.getCaseAccess().getAlternatives_4_1_1(), "rule__Case__Alternatives_4_1_1");
					put(grammarAccess.getSentenceItemNoAmbivalenceAccess().getAlternatives(), "rule__SentenceItemNoAmbivalence__Alternatives");
					put(grammarAccess.getVersMarkerAccess().getAlternatives(), "rule__VersMarker__Alternatives");
					put(grammarAccess.getMarkerAccess().getAlternatives_1_1_1(), "rule__Marker__Alternatives_1_1_1");
					put(grammarAccess.getWordMiddleAccess().getAlternatives(), "rule__WordMiddle__Alternatives");
					put(grammarAccess.getInterfixAccess().getAlternatives(), "rule__Interfix__Alternatives");
					put(grammarAccess.getBracketsAccess().getAlternatives(), "rule__Brackets__Alternatives");
					put(grammarAccess.getNoExpandedAccess().getAlternatives(), "rule__NoExpanded__Alternatives");
					put(grammarAccess.getNoEmendationAccess().getAlternatives(), "rule__NoEmendation__Alternatives");
					put(grammarAccess.getNoDisputableReadingAccess().getAlternatives(), "rule__NoDisputableReading__Alternatives");
					put(grammarAccess.getNoLacunaAccess().getAlternatives(), "rule__NoLacuna__Alternatives");
					put(grammarAccess.getNoDeletionAccess().getAlternatives(), "rule__NoDeletion__Alternatives");
					put(grammarAccess.getNoExpandedColumnAccess().getAlternatives(), "rule__NoExpandedColumn__Alternatives");
					put(grammarAccess.getNoRasurAccess().getAlternatives(), "rule__NoRasur__Alternatives");
					put(grammarAccess.getNoAncientExpandedAccess().getAlternatives(), "rule__NoAncientExpanded__Alternatives");
					put(grammarAccess.getNoRestorationOverRasurAccess().getAlternatives(), "rule__NoRestorationOverRasur__Alternatives");
					put(grammarAccess.getNoPartialDestructionAccess().getAlternatives(), "rule__NoPartialDestruction__Alternatives");
					put(grammarAccess.getTextContentAccess().getGroup(), "rule__TextContent__Group__0");
					put(grammarAccess.getTextContentAccess().getGroup_1(), "rule__TextContent__Group_1__0");
					put(grammarAccess.getTextContentAccess().getGroup_1_1(), "rule__TextContent__Group_1_1__0");
					put(grammarAccess.getSentenceAccess().getGroup(), "rule__Sentence__Group__0");
					put(grammarAccess.getSentenceAccess().getGroup_1(), "rule__Sentence__Group_1__0");
					put(grammarAccess.getSentenceAccess().getGroup_1_1(), "rule__Sentence__Group_1_1__0");
					put(grammarAccess.getSentenceItemAccess().getGroup_0(), "rule__SentenceItem__Group_0__0");
					put(grammarAccess.getSentenceItemAccess().getGroup_1(), "rule__SentenceItem__Group_1__0");
					put(grammarAccess.getSentenceItemAccess().getGroup_2(), "rule__SentenceItem__Group_2__0");
					put(grammarAccess.getAmbivalenceAccess().getGroup(), "rule__Ambivalence__Group__0");
					put(grammarAccess.getAmbivalenceAccess().getGroup_1(), "rule__Ambivalence__Group_1__0");
					put(grammarAccess.getAmbivalenceAccess().getGroup_1_1(), "rule__Ambivalence__Group_1_1__0");
					put(grammarAccess.getCaseAccess().getGroup(), "rule__Case__Group__0");
					put(grammarAccess.getCaseAccess().getGroup_4(), "rule__Case__Group_4__0");
					put(grammarAccess.getCaseAccess().getGroup_4_1(), "rule__Case__Group_4_1__0");
					put(grammarAccess.getVersFrontierMarkerAccess().getGroup(), "rule__VersFrontierMarker__Group__0");
					put(grammarAccess.getVersbreakMarkerAccess().getGroup(), "rule__VersbreakMarker__Group__0");
					put(grammarAccess.getMarkerAccess().getGroup(), "rule__Marker__Group__0");
					put(grammarAccess.getMarkerAccess().getGroup_1(), "rule__Marker__Group_1__0");
					put(grammarAccess.getMarkerAccess().getGroup_1_1(), "rule__Marker__Group_1_1__0");
					put(grammarAccess.getWordAccess().getGroup(), "rule__Word__Group__0");
					put(grammarAccess.getInterfixLexicalAccess().getGroup(), "rule__InterfixLexical__Group__0");
					put(grammarAccess.getInterfixFlexionAccess().getGroup(), "rule__InterfixFlexion__Group__0");
					put(grammarAccess.getInterfixSuffixPronomLexicalAccess().getGroup(), "rule__InterfixSuffixPronomLexical__Group__0");
					put(grammarAccess.getInterfixPrefixNonLexicalAccess().getGroup(), "rule__InterfixPrefixNonLexical__Group__0");
					put(grammarAccess.getInterfixPrefixLexicalAccess().getGroup(), "rule__InterfixPrefixLexical__Group__0");
					put(grammarAccess.getInterfixCompountWordsAccess().getGroup(), "rule__InterfixCompountWords__Group__0");
					put(grammarAccess.getInterfixConnectionSyllabicGroupAccess().getGroup(), "rule__InterfixConnectionSyllabicGroup__Group__0");
					put(grammarAccess.getExpandedAccess().getGroup(), "rule__Expanded__Group__0");
					put(grammarAccess.getEmendationAccess().getGroup(), "rule__Emendation__Group__0");
					put(grammarAccess.getDisputableReadingAccess().getGroup(), "rule__DisputableReading__Group__0");
					put(grammarAccess.getLacunaAccess().getGroup(), "rule__Lacuna__Group__0");
					put(grammarAccess.getDeletionAccess().getGroup(), "rule__Deletion__Group__0");
					put(grammarAccess.getExpandedColumnAccess().getGroup(), "rule__ExpandedColumn__Group__0");
					put(grammarAccess.getRasurAccess().getGroup(), "rule__Rasur__Group__0");
					put(grammarAccess.getAncientExpandedAccess().getGroup(), "rule__AncientExpanded__Group__0");
					put(grammarAccess.getRestorationOverRasurAccess().getGroup(), "rule__RestorationOverRasur__Group__0");
					put(grammarAccess.getPartialDestructionAccess().getGroup(), "rule__PartialDestruction__Group__0");
					put(grammarAccess.getDestructionAccess().getGroup(), "rule__Destruction__Group__0");
					put(grammarAccess.getTextContentAccess().getItemsAssignment_1_0(), "rule__TextContent__ItemsAssignment_1_0");
					put(grammarAccess.getTextContentAccess().getItemsAssignment_1_1_1(), "rule__TextContent__ItemsAssignment_1_1_1");
					put(grammarAccess.getSentenceAccess().getItemsAssignment_1_0(), "rule__Sentence__ItemsAssignment_1_0");
					put(grammarAccess.getSentenceAccess().getItemsAssignment_1_1_1(), "rule__Sentence__ItemsAssignment_1_1_1");
					put(grammarAccess.getAmbivalenceAccess().getCasesAssignment_1_0(), "rule__Ambivalence__CasesAssignment_1_0");
					put(grammarAccess.getAmbivalenceAccess().getCasesAssignment_1_1_2(), "rule__Ambivalence__CasesAssignment_1_1_2");
					put(grammarAccess.getCaseAccess().getNameAssignment_1(), "rule__Case__NameAssignment_1");
					put(grammarAccess.getCaseAccess().getItemsAssignment_4_0(), "rule__Case__ItemsAssignment_4_0");
					put(grammarAccess.getCaseAccess().getItemsAssignment_4_1_2(), "rule__Case__ItemsAssignment_4_1_2");
					put(grammarAccess.getMarkerAccess().getTypeAssignment_1_0(), "rule__Marker__TypeAssignment_1_0");
					put(grammarAccess.getMarkerAccess().getNameAssignment_1_1_2(), "rule__Marker__NameAssignment_1_1_2");
					put(grammarAccess.getWordAccess().getWCharAssignment_1(), "rule__Word__WCharAssignment_1");
					put(grammarAccess.getCharsAccess().getNameAssignment(), "rule__Chars__NameAssignment");
					put(grammarAccess.getExpandedAccess().getWCharAssignment_2(), "rule__Expanded__WCharAssignment_2");
					put(grammarAccess.getEmendationAccess().getWCharAssignment_2(), "rule__Emendation__WCharAssignment_2");
					put(grammarAccess.getDisputableReadingAccess().getWCharAssignment_2(), "rule__DisputableReading__WCharAssignment_2");
					put(grammarAccess.getLacunaAccess().getWCharAssignment_2(), "rule__Lacuna__WCharAssignment_2");
					put(grammarAccess.getDeletionAccess().getWCharAssignment_2(), "rule__Deletion__WCharAssignment_2");
					put(grammarAccess.getExpandedColumnAccess().getWCharAssignment_2(), "rule__ExpandedColumn__WCharAssignment_2");
					put(grammarAccess.getRasurAccess().getWCharAssignment_2(), "rule__Rasur__WCharAssignment_2");
					put(grammarAccess.getAncientExpandedAccess().getWCharAssignment_2(), "rule__AncientExpanded__WCharAssignment_2");
					put(grammarAccess.getRestorationOverRasurAccess().getWCharAssignment_2(), "rule__RestorationOverRasur__WCharAssignment_2");
					put(grammarAccess.getPartialDestructionAccess().getWCharAssignment_2(), "rule__PartialDestruction__WCharAssignment_2");
					put(grammarAccess.getDestructionAccess().getCommentAssignment_2(), "rule__Destruction__CommentAssignment_2");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.bbaw.bts.corpus.text.egy.ui.contentassist.antlr.internal.InternalEgyDslParser typedParser = (org.bbaw.bts.corpus.text.egy.ui.contentassist.antlr.internal.InternalEgyDslParser) parser;
			typedParser.entryRuleTextContent();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public EgyDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(EgyDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
